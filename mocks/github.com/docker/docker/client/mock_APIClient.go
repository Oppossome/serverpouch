// Code generated by mockery v2.52.3. DO NOT EDIT.

package client

import (
	checkpoint "github.com/docker/docker/api/types/checkpoint"

	container "github.com/docker/docker/api/types/container"

	context "context"

	events "github.com/docker/docker/api/types/events"

	filters "github.com/docker/docker/api/types/filters"

	http "net/http"

	image "github.com/docker/docker/api/types/image"

	io "io"

	mock "github.com/stretchr/testify/mock"

	net "net"

	network "github.com/docker/docker/api/types/network"

	registry "github.com/docker/docker/api/types/registry"

	swarm "github.com/docker/docker/api/types/swarm"

	system "github.com/docker/docker/api/types/system"

	types "github.com/docker/docker/api/types"

	v1 "github.com/opencontainers/image-spec/specs-go/v1"

	volume "github.com/docker/docker/api/types/volume"
)

// MockAPIClient is an autogenerated mock type for the APIClient type
type MockAPIClient struct {
	mock.Mock
}

type MockAPIClient_Expecter struct {
	mock *mock.Mock
}

func (_m *MockAPIClient) EXPECT() *MockAPIClient_Expecter {
	return &MockAPIClient_Expecter{mock: &_m.Mock}
}

// BuildCachePrune provides a mock function with given fields: ctx, opts
func (_m *MockAPIClient) BuildCachePrune(ctx context.Context, opts types.BuildCachePruneOptions) (*types.BuildCachePruneReport, error) {
	ret := _m.Called(ctx, opts)

	if len(ret) == 0 {
		panic("no return value specified for BuildCachePrune")
	}

	var r0 *types.BuildCachePruneReport
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, types.BuildCachePruneOptions) (*types.BuildCachePruneReport, error)); ok {
		return rf(ctx, opts)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.BuildCachePruneOptions) *types.BuildCachePruneReport); ok {
		r0 = rf(ctx, opts)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.BuildCachePruneReport)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.BuildCachePruneOptions) error); ok {
		r1 = rf(ctx, opts)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAPIClient_BuildCachePrune_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BuildCachePrune'
type MockAPIClient_BuildCachePrune_Call struct {
	*mock.Call
}

// BuildCachePrune is a helper method to define mock.On call
//   - ctx context.Context
//   - opts types.BuildCachePruneOptions
func (_e *MockAPIClient_Expecter) BuildCachePrune(ctx interface{}, opts interface{}) *MockAPIClient_BuildCachePrune_Call {
	return &MockAPIClient_BuildCachePrune_Call{Call: _e.mock.On("BuildCachePrune", ctx, opts)}
}

func (_c *MockAPIClient_BuildCachePrune_Call) Run(run func(ctx context.Context, opts types.BuildCachePruneOptions)) *MockAPIClient_BuildCachePrune_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.BuildCachePruneOptions))
	})
	return _c
}

func (_c *MockAPIClient_BuildCachePrune_Call) Return(_a0 *types.BuildCachePruneReport, _a1 error) *MockAPIClient_BuildCachePrune_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAPIClient_BuildCachePrune_Call) RunAndReturn(run func(context.Context, types.BuildCachePruneOptions) (*types.BuildCachePruneReport, error)) *MockAPIClient_BuildCachePrune_Call {
	_c.Call.Return(run)
	return _c
}

// BuildCancel provides a mock function with given fields: ctx, id
func (_m *MockAPIClient) BuildCancel(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for BuildCancel")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAPIClient_BuildCancel_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'BuildCancel'
type MockAPIClient_BuildCancel_Call struct {
	*mock.Call
}

// BuildCancel is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockAPIClient_Expecter) BuildCancel(ctx interface{}, id interface{}) *MockAPIClient_BuildCancel_Call {
	return &MockAPIClient_BuildCancel_Call{Call: _e.mock.On("BuildCancel", ctx, id)}
}

func (_c *MockAPIClient_BuildCancel_Call) Run(run func(ctx context.Context, id string)) *MockAPIClient_BuildCancel_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockAPIClient_BuildCancel_Call) Return(_a0 error) *MockAPIClient_BuildCancel_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAPIClient_BuildCancel_Call) RunAndReturn(run func(context.Context, string) error) *MockAPIClient_BuildCancel_Call {
	_c.Call.Return(run)
	return _c
}

// CheckpointCreate provides a mock function with given fields: ctx, _a1, options
func (_m *MockAPIClient) CheckpointCreate(ctx context.Context, _a1 string, options checkpoint.CreateOptions) error {
	ret := _m.Called(ctx, _a1, options)

	if len(ret) == 0 {
		panic("no return value specified for CheckpointCreate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, checkpoint.CreateOptions) error); ok {
		r0 = rf(ctx, _a1, options)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAPIClient_CheckpointCreate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckpointCreate'
type MockAPIClient_CheckpointCreate_Call struct {
	*mock.Call
}

// CheckpointCreate is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 string
//   - options checkpoint.CreateOptions
func (_e *MockAPIClient_Expecter) CheckpointCreate(ctx interface{}, _a1 interface{}, options interface{}) *MockAPIClient_CheckpointCreate_Call {
	return &MockAPIClient_CheckpointCreate_Call{Call: _e.mock.On("CheckpointCreate", ctx, _a1, options)}
}

func (_c *MockAPIClient_CheckpointCreate_Call) Run(run func(ctx context.Context, _a1 string, options checkpoint.CreateOptions)) *MockAPIClient_CheckpointCreate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(checkpoint.CreateOptions))
	})
	return _c
}

func (_c *MockAPIClient_CheckpointCreate_Call) Return(_a0 error) *MockAPIClient_CheckpointCreate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAPIClient_CheckpointCreate_Call) RunAndReturn(run func(context.Context, string, checkpoint.CreateOptions) error) *MockAPIClient_CheckpointCreate_Call {
	_c.Call.Return(run)
	return _c
}

// CheckpointDelete provides a mock function with given fields: ctx, _a1, options
func (_m *MockAPIClient) CheckpointDelete(ctx context.Context, _a1 string, options checkpoint.DeleteOptions) error {
	ret := _m.Called(ctx, _a1, options)

	if len(ret) == 0 {
		panic("no return value specified for CheckpointDelete")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, checkpoint.DeleteOptions) error); ok {
		r0 = rf(ctx, _a1, options)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAPIClient_CheckpointDelete_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckpointDelete'
type MockAPIClient_CheckpointDelete_Call struct {
	*mock.Call
}

// CheckpointDelete is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 string
//   - options checkpoint.DeleteOptions
func (_e *MockAPIClient_Expecter) CheckpointDelete(ctx interface{}, _a1 interface{}, options interface{}) *MockAPIClient_CheckpointDelete_Call {
	return &MockAPIClient_CheckpointDelete_Call{Call: _e.mock.On("CheckpointDelete", ctx, _a1, options)}
}

func (_c *MockAPIClient_CheckpointDelete_Call) Run(run func(ctx context.Context, _a1 string, options checkpoint.DeleteOptions)) *MockAPIClient_CheckpointDelete_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(checkpoint.DeleteOptions))
	})
	return _c
}

func (_c *MockAPIClient_CheckpointDelete_Call) Return(_a0 error) *MockAPIClient_CheckpointDelete_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAPIClient_CheckpointDelete_Call) RunAndReturn(run func(context.Context, string, checkpoint.DeleteOptions) error) *MockAPIClient_CheckpointDelete_Call {
	_c.Call.Return(run)
	return _c
}

// CheckpointList provides a mock function with given fields: ctx, _a1, options
func (_m *MockAPIClient) CheckpointList(ctx context.Context, _a1 string, options checkpoint.ListOptions) ([]checkpoint.Summary, error) {
	ret := _m.Called(ctx, _a1, options)

	if len(ret) == 0 {
		panic("no return value specified for CheckpointList")
	}

	var r0 []checkpoint.Summary
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, checkpoint.ListOptions) ([]checkpoint.Summary, error)); ok {
		return rf(ctx, _a1, options)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, checkpoint.ListOptions) []checkpoint.Summary); ok {
		r0 = rf(ctx, _a1, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]checkpoint.Summary)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, checkpoint.ListOptions) error); ok {
		r1 = rf(ctx, _a1, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAPIClient_CheckpointList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CheckpointList'
type MockAPIClient_CheckpointList_Call struct {
	*mock.Call
}

// CheckpointList is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 string
//   - options checkpoint.ListOptions
func (_e *MockAPIClient_Expecter) CheckpointList(ctx interface{}, _a1 interface{}, options interface{}) *MockAPIClient_CheckpointList_Call {
	return &MockAPIClient_CheckpointList_Call{Call: _e.mock.On("CheckpointList", ctx, _a1, options)}
}

func (_c *MockAPIClient_CheckpointList_Call) Run(run func(ctx context.Context, _a1 string, options checkpoint.ListOptions)) *MockAPIClient_CheckpointList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(checkpoint.ListOptions))
	})
	return _c
}

func (_c *MockAPIClient_CheckpointList_Call) Return(_a0 []checkpoint.Summary, _a1 error) *MockAPIClient_CheckpointList_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAPIClient_CheckpointList_Call) RunAndReturn(run func(context.Context, string, checkpoint.ListOptions) ([]checkpoint.Summary, error)) *MockAPIClient_CheckpointList_Call {
	_c.Call.Return(run)
	return _c
}

// ClientVersion provides a mock function with no fields
func (_m *MockAPIClient) ClientVersion() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for ClientVersion")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockAPIClient_ClientVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ClientVersion'
type MockAPIClient_ClientVersion_Call struct {
	*mock.Call
}

// ClientVersion is a helper method to define mock.On call
func (_e *MockAPIClient_Expecter) ClientVersion() *MockAPIClient_ClientVersion_Call {
	return &MockAPIClient_ClientVersion_Call{Call: _e.mock.On("ClientVersion")}
}

func (_c *MockAPIClient_ClientVersion_Call) Run(run func()) *MockAPIClient_ClientVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAPIClient_ClientVersion_Call) Return(_a0 string) *MockAPIClient_ClientVersion_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAPIClient_ClientVersion_Call) RunAndReturn(run func() string) *MockAPIClient_ClientVersion_Call {
	_c.Call.Return(run)
	return _c
}

// Close provides a mock function with no fields
func (_m *MockAPIClient) Close() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Close")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAPIClient_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockAPIClient_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockAPIClient_Expecter) Close() *MockAPIClient_Close_Call {
	return &MockAPIClient_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockAPIClient_Close_Call) Run(run func()) *MockAPIClient_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAPIClient_Close_Call) Return(_a0 error) *MockAPIClient_Close_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAPIClient_Close_Call) RunAndReturn(run func() error) *MockAPIClient_Close_Call {
	_c.Call.Return(run)
	return _c
}

// ConfigCreate provides a mock function with given fields: ctx, config
func (_m *MockAPIClient) ConfigCreate(ctx context.Context, config swarm.ConfigSpec) (types.ConfigCreateResponse, error) {
	ret := _m.Called(ctx, config)

	if len(ret) == 0 {
		panic("no return value specified for ConfigCreate")
	}

	var r0 types.ConfigCreateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, swarm.ConfigSpec) (types.ConfigCreateResponse, error)); ok {
		return rf(ctx, config)
	}
	if rf, ok := ret.Get(0).(func(context.Context, swarm.ConfigSpec) types.ConfigCreateResponse); ok {
		r0 = rf(ctx, config)
	} else {
		r0 = ret.Get(0).(types.ConfigCreateResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, swarm.ConfigSpec) error); ok {
		r1 = rf(ctx, config)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAPIClient_ConfigCreate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConfigCreate'
type MockAPIClient_ConfigCreate_Call struct {
	*mock.Call
}

// ConfigCreate is a helper method to define mock.On call
//   - ctx context.Context
//   - config swarm.ConfigSpec
func (_e *MockAPIClient_Expecter) ConfigCreate(ctx interface{}, config interface{}) *MockAPIClient_ConfigCreate_Call {
	return &MockAPIClient_ConfigCreate_Call{Call: _e.mock.On("ConfigCreate", ctx, config)}
}

func (_c *MockAPIClient_ConfigCreate_Call) Run(run func(ctx context.Context, config swarm.ConfigSpec)) *MockAPIClient_ConfigCreate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(swarm.ConfigSpec))
	})
	return _c
}

func (_c *MockAPIClient_ConfigCreate_Call) Return(_a0 types.ConfigCreateResponse, _a1 error) *MockAPIClient_ConfigCreate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAPIClient_ConfigCreate_Call) RunAndReturn(run func(context.Context, swarm.ConfigSpec) (types.ConfigCreateResponse, error)) *MockAPIClient_ConfigCreate_Call {
	_c.Call.Return(run)
	return _c
}

// ConfigInspectWithRaw provides a mock function with given fields: ctx, name
func (_m *MockAPIClient) ConfigInspectWithRaw(ctx context.Context, name string) (swarm.Config, []byte, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for ConfigInspectWithRaw")
	}

	var r0 swarm.Config
	var r1 []byte
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (swarm.Config, []byte, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) swarm.Config); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(swarm.Config)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) []byte); ok {
		r1 = rf(ctx, name)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]byte)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(ctx, name)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockAPIClient_ConfigInspectWithRaw_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConfigInspectWithRaw'
type MockAPIClient_ConfigInspectWithRaw_Call struct {
	*mock.Call
}

// ConfigInspectWithRaw is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockAPIClient_Expecter) ConfigInspectWithRaw(ctx interface{}, name interface{}) *MockAPIClient_ConfigInspectWithRaw_Call {
	return &MockAPIClient_ConfigInspectWithRaw_Call{Call: _e.mock.On("ConfigInspectWithRaw", ctx, name)}
}

func (_c *MockAPIClient_ConfigInspectWithRaw_Call) Run(run func(ctx context.Context, name string)) *MockAPIClient_ConfigInspectWithRaw_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockAPIClient_ConfigInspectWithRaw_Call) Return(_a0 swarm.Config, _a1 []byte, _a2 error) *MockAPIClient_ConfigInspectWithRaw_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockAPIClient_ConfigInspectWithRaw_Call) RunAndReturn(run func(context.Context, string) (swarm.Config, []byte, error)) *MockAPIClient_ConfigInspectWithRaw_Call {
	_c.Call.Return(run)
	return _c
}

// ConfigList provides a mock function with given fields: ctx, options
func (_m *MockAPIClient) ConfigList(ctx context.Context, options types.ConfigListOptions) ([]swarm.Config, error) {
	ret := _m.Called(ctx, options)

	if len(ret) == 0 {
		panic("no return value specified for ConfigList")
	}

	var r0 []swarm.Config
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, types.ConfigListOptions) ([]swarm.Config, error)); ok {
		return rf(ctx, options)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.ConfigListOptions) []swarm.Config); ok {
		r0 = rf(ctx, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]swarm.Config)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.ConfigListOptions) error); ok {
		r1 = rf(ctx, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAPIClient_ConfigList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConfigList'
type MockAPIClient_ConfigList_Call struct {
	*mock.Call
}

// ConfigList is a helper method to define mock.On call
//   - ctx context.Context
//   - options types.ConfigListOptions
func (_e *MockAPIClient_Expecter) ConfigList(ctx interface{}, options interface{}) *MockAPIClient_ConfigList_Call {
	return &MockAPIClient_ConfigList_Call{Call: _e.mock.On("ConfigList", ctx, options)}
}

func (_c *MockAPIClient_ConfigList_Call) Run(run func(ctx context.Context, options types.ConfigListOptions)) *MockAPIClient_ConfigList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.ConfigListOptions))
	})
	return _c
}

func (_c *MockAPIClient_ConfigList_Call) Return(_a0 []swarm.Config, _a1 error) *MockAPIClient_ConfigList_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAPIClient_ConfigList_Call) RunAndReturn(run func(context.Context, types.ConfigListOptions) ([]swarm.Config, error)) *MockAPIClient_ConfigList_Call {
	_c.Call.Return(run)
	return _c
}

// ConfigRemove provides a mock function with given fields: ctx, id
func (_m *MockAPIClient) ConfigRemove(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for ConfigRemove")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAPIClient_ConfigRemove_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConfigRemove'
type MockAPIClient_ConfigRemove_Call struct {
	*mock.Call
}

// ConfigRemove is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockAPIClient_Expecter) ConfigRemove(ctx interface{}, id interface{}) *MockAPIClient_ConfigRemove_Call {
	return &MockAPIClient_ConfigRemove_Call{Call: _e.mock.On("ConfigRemove", ctx, id)}
}

func (_c *MockAPIClient_ConfigRemove_Call) Run(run func(ctx context.Context, id string)) *MockAPIClient_ConfigRemove_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockAPIClient_ConfigRemove_Call) Return(_a0 error) *MockAPIClient_ConfigRemove_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAPIClient_ConfigRemove_Call) RunAndReturn(run func(context.Context, string) error) *MockAPIClient_ConfigRemove_Call {
	_c.Call.Return(run)
	return _c
}

// ConfigUpdate provides a mock function with given fields: ctx, id, version, config
func (_m *MockAPIClient) ConfigUpdate(ctx context.Context, id string, version swarm.Version, config swarm.ConfigSpec) error {
	ret := _m.Called(ctx, id, version, config)

	if len(ret) == 0 {
		panic("no return value specified for ConfigUpdate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, swarm.Version, swarm.ConfigSpec) error); ok {
		r0 = rf(ctx, id, version, config)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAPIClient_ConfigUpdate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ConfigUpdate'
type MockAPIClient_ConfigUpdate_Call struct {
	*mock.Call
}

// ConfigUpdate is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - version swarm.Version
//   - config swarm.ConfigSpec
func (_e *MockAPIClient_Expecter) ConfigUpdate(ctx interface{}, id interface{}, version interface{}, config interface{}) *MockAPIClient_ConfigUpdate_Call {
	return &MockAPIClient_ConfigUpdate_Call{Call: _e.mock.On("ConfigUpdate", ctx, id, version, config)}
}

func (_c *MockAPIClient_ConfigUpdate_Call) Run(run func(ctx context.Context, id string, version swarm.Version, config swarm.ConfigSpec)) *MockAPIClient_ConfigUpdate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(swarm.Version), args[3].(swarm.ConfigSpec))
	})
	return _c
}

func (_c *MockAPIClient_ConfigUpdate_Call) Return(_a0 error) *MockAPIClient_ConfigUpdate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAPIClient_ConfigUpdate_Call) RunAndReturn(run func(context.Context, string, swarm.Version, swarm.ConfigSpec) error) *MockAPIClient_ConfigUpdate_Call {
	_c.Call.Return(run)
	return _c
}

// ContainerAttach provides a mock function with given fields: ctx, _a1, options
func (_m *MockAPIClient) ContainerAttach(ctx context.Context, _a1 string, options container.AttachOptions) (types.HijackedResponse, error) {
	ret := _m.Called(ctx, _a1, options)

	if len(ret) == 0 {
		panic("no return value specified for ContainerAttach")
	}

	var r0 types.HijackedResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, container.AttachOptions) (types.HijackedResponse, error)); ok {
		return rf(ctx, _a1, options)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, container.AttachOptions) types.HijackedResponse); ok {
		r0 = rf(ctx, _a1, options)
	} else {
		r0 = ret.Get(0).(types.HijackedResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, container.AttachOptions) error); ok {
		r1 = rf(ctx, _a1, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAPIClient_ContainerAttach_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ContainerAttach'
type MockAPIClient_ContainerAttach_Call struct {
	*mock.Call
}

// ContainerAttach is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 string
//   - options container.AttachOptions
func (_e *MockAPIClient_Expecter) ContainerAttach(ctx interface{}, _a1 interface{}, options interface{}) *MockAPIClient_ContainerAttach_Call {
	return &MockAPIClient_ContainerAttach_Call{Call: _e.mock.On("ContainerAttach", ctx, _a1, options)}
}

func (_c *MockAPIClient_ContainerAttach_Call) Run(run func(ctx context.Context, _a1 string, options container.AttachOptions)) *MockAPIClient_ContainerAttach_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(container.AttachOptions))
	})
	return _c
}

func (_c *MockAPIClient_ContainerAttach_Call) Return(_a0 types.HijackedResponse, _a1 error) *MockAPIClient_ContainerAttach_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAPIClient_ContainerAttach_Call) RunAndReturn(run func(context.Context, string, container.AttachOptions) (types.HijackedResponse, error)) *MockAPIClient_ContainerAttach_Call {
	_c.Call.Return(run)
	return _c
}

// ContainerCommit provides a mock function with given fields: ctx, _a1, options
func (_m *MockAPIClient) ContainerCommit(ctx context.Context, _a1 string, options container.CommitOptions) (types.IDResponse, error) {
	ret := _m.Called(ctx, _a1, options)

	if len(ret) == 0 {
		panic("no return value specified for ContainerCommit")
	}

	var r0 types.IDResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, container.CommitOptions) (types.IDResponse, error)); ok {
		return rf(ctx, _a1, options)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, container.CommitOptions) types.IDResponse); ok {
		r0 = rf(ctx, _a1, options)
	} else {
		r0 = ret.Get(0).(types.IDResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, container.CommitOptions) error); ok {
		r1 = rf(ctx, _a1, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAPIClient_ContainerCommit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ContainerCommit'
type MockAPIClient_ContainerCommit_Call struct {
	*mock.Call
}

// ContainerCommit is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 string
//   - options container.CommitOptions
func (_e *MockAPIClient_Expecter) ContainerCommit(ctx interface{}, _a1 interface{}, options interface{}) *MockAPIClient_ContainerCommit_Call {
	return &MockAPIClient_ContainerCommit_Call{Call: _e.mock.On("ContainerCommit", ctx, _a1, options)}
}

func (_c *MockAPIClient_ContainerCommit_Call) Run(run func(ctx context.Context, _a1 string, options container.CommitOptions)) *MockAPIClient_ContainerCommit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(container.CommitOptions))
	})
	return _c
}

func (_c *MockAPIClient_ContainerCommit_Call) Return(_a0 types.IDResponse, _a1 error) *MockAPIClient_ContainerCommit_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAPIClient_ContainerCommit_Call) RunAndReturn(run func(context.Context, string, container.CommitOptions) (types.IDResponse, error)) *MockAPIClient_ContainerCommit_Call {
	_c.Call.Return(run)
	return _c
}

// ContainerCreate provides a mock function with given fields: ctx, config, hostConfig, networkingConfig, platform, containerName
func (_m *MockAPIClient) ContainerCreate(ctx context.Context, config *container.Config, hostConfig *container.HostConfig, networkingConfig *network.NetworkingConfig, platform *v1.Platform, containerName string) (container.CreateResponse, error) {
	ret := _m.Called(ctx, config, hostConfig, networkingConfig, platform, containerName)

	if len(ret) == 0 {
		panic("no return value specified for ContainerCreate")
	}

	var r0 container.CreateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, *container.Config, *container.HostConfig, *network.NetworkingConfig, *v1.Platform, string) (container.CreateResponse, error)); ok {
		return rf(ctx, config, hostConfig, networkingConfig, platform, containerName)
	}
	if rf, ok := ret.Get(0).(func(context.Context, *container.Config, *container.HostConfig, *network.NetworkingConfig, *v1.Platform, string) container.CreateResponse); ok {
		r0 = rf(ctx, config, hostConfig, networkingConfig, platform, containerName)
	} else {
		r0 = ret.Get(0).(container.CreateResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, *container.Config, *container.HostConfig, *network.NetworkingConfig, *v1.Platform, string) error); ok {
		r1 = rf(ctx, config, hostConfig, networkingConfig, platform, containerName)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAPIClient_ContainerCreate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ContainerCreate'
type MockAPIClient_ContainerCreate_Call struct {
	*mock.Call
}

// ContainerCreate is a helper method to define mock.On call
//   - ctx context.Context
//   - config *container.Config
//   - hostConfig *container.HostConfig
//   - networkingConfig *network.NetworkingConfig
//   - platform *v1.Platform
//   - containerName string
func (_e *MockAPIClient_Expecter) ContainerCreate(ctx interface{}, config interface{}, hostConfig interface{}, networkingConfig interface{}, platform interface{}, containerName interface{}) *MockAPIClient_ContainerCreate_Call {
	return &MockAPIClient_ContainerCreate_Call{Call: _e.mock.On("ContainerCreate", ctx, config, hostConfig, networkingConfig, platform, containerName)}
}

func (_c *MockAPIClient_ContainerCreate_Call) Run(run func(ctx context.Context, config *container.Config, hostConfig *container.HostConfig, networkingConfig *network.NetworkingConfig, platform *v1.Platform, containerName string)) *MockAPIClient_ContainerCreate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(*container.Config), args[2].(*container.HostConfig), args[3].(*network.NetworkingConfig), args[4].(*v1.Platform), args[5].(string))
	})
	return _c
}

func (_c *MockAPIClient_ContainerCreate_Call) Return(_a0 container.CreateResponse, _a1 error) *MockAPIClient_ContainerCreate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAPIClient_ContainerCreate_Call) RunAndReturn(run func(context.Context, *container.Config, *container.HostConfig, *network.NetworkingConfig, *v1.Platform, string) (container.CreateResponse, error)) *MockAPIClient_ContainerCreate_Call {
	_c.Call.Return(run)
	return _c
}

// ContainerDiff provides a mock function with given fields: ctx, _a1
func (_m *MockAPIClient) ContainerDiff(ctx context.Context, _a1 string) ([]container.FilesystemChange, error) {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ContainerDiff")
	}

	var r0 []container.FilesystemChange
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]container.FilesystemChange, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []container.FilesystemChange); ok {
		r0 = rf(ctx, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]container.FilesystemChange)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAPIClient_ContainerDiff_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ContainerDiff'
type MockAPIClient_ContainerDiff_Call struct {
	*mock.Call
}

// ContainerDiff is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 string
func (_e *MockAPIClient_Expecter) ContainerDiff(ctx interface{}, _a1 interface{}) *MockAPIClient_ContainerDiff_Call {
	return &MockAPIClient_ContainerDiff_Call{Call: _e.mock.On("ContainerDiff", ctx, _a1)}
}

func (_c *MockAPIClient_ContainerDiff_Call) Run(run func(ctx context.Context, _a1 string)) *MockAPIClient_ContainerDiff_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockAPIClient_ContainerDiff_Call) Return(_a0 []container.FilesystemChange, _a1 error) *MockAPIClient_ContainerDiff_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAPIClient_ContainerDiff_Call) RunAndReturn(run func(context.Context, string) ([]container.FilesystemChange, error)) *MockAPIClient_ContainerDiff_Call {
	_c.Call.Return(run)
	return _c
}

// ContainerExecAttach provides a mock function with given fields: ctx, execID, options
func (_m *MockAPIClient) ContainerExecAttach(ctx context.Context, execID string, options container.ExecStartOptions) (types.HijackedResponse, error) {
	ret := _m.Called(ctx, execID, options)

	if len(ret) == 0 {
		panic("no return value specified for ContainerExecAttach")
	}

	var r0 types.HijackedResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, container.ExecStartOptions) (types.HijackedResponse, error)); ok {
		return rf(ctx, execID, options)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, container.ExecStartOptions) types.HijackedResponse); ok {
		r0 = rf(ctx, execID, options)
	} else {
		r0 = ret.Get(0).(types.HijackedResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, container.ExecStartOptions) error); ok {
		r1 = rf(ctx, execID, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAPIClient_ContainerExecAttach_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ContainerExecAttach'
type MockAPIClient_ContainerExecAttach_Call struct {
	*mock.Call
}

// ContainerExecAttach is a helper method to define mock.On call
//   - ctx context.Context
//   - execID string
//   - options container.ExecStartOptions
func (_e *MockAPIClient_Expecter) ContainerExecAttach(ctx interface{}, execID interface{}, options interface{}) *MockAPIClient_ContainerExecAttach_Call {
	return &MockAPIClient_ContainerExecAttach_Call{Call: _e.mock.On("ContainerExecAttach", ctx, execID, options)}
}

func (_c *MockAPIClient_ContainerExecAttach_Call) Run(run func(ctx context.Context, execID string, options container.ExecStartOptions)) *MockAPIClient_ContainerExecAttach_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(container.ExecStartOptions))
	})
	return _c
}

func (_c *MockAPIClient_ContainerExecAttach_Call) Return(_a0 types.HijackedResponse, _a1 error) *MockAPIClient_ContainerExecAttach_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAPIClient_ContainerExecAttach_Call) RunAndReturn(run func(context.Context, string, container.ExecStartOptions) (types.HijackedResponse, error)) *MockAPIClient_ContainerExecAttach_Call {
	_c.Call.Return(run)
	return _c
}

// ContainerExecCreate provides a mock function with given fields: ctx, _a1, options
func (_m *MockAPIClient) ContainerExecCreate(ctx context.Context, _a1 string, options container.ExecOptions) (types.IDResponse, error) {
	ret := _m.Called(ctx, _a1, options)

	if len(ret) == 0 {
		panic("no return value specified for ContainerExecCreate")
	}

	var r0 types.IDResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, container.ExecOptions) (types.IDResponse, error)); ok {
		return rf(ctx, _a1, options)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, container.ExecOptions) types.IDResponse); ok {
		r0 = rf(ctx, _a1, options)
	} else {
		r0 = ret.Get(0).(types.IDResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, container.ExecOptions) error); ok {
		r1 = rf(ctx, _a1, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAPIClient_ContainerExecCreate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ContainerExecCreate'
type MockAPIClient_ContainerExecCreate_Call struct {
	*mock.Call
}

// ContainerExecCreate is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 string
//   - options container.ExecOptions
func (_e *MockAPIClient_Expecter) ContainerExecCreate(ctx interface{}, _a1 interface{}, options interface{}) *MockAPIClient_ContainerExecCreate_Call {
	return &MockAPIClient_ContainerExecCreate_Call{Call: _e.mock.On("ContainerExecCreate", ctx, _a1, options)}
}

func (_c *MockAPIClient_ContainerExecCreate_Call) Run(run func(ctx context.Context, _a1 string, options container.ExecOptions)) *MockAPIClient_ContainerExecCreate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(container.ExecOptions))
	})
	return _c
}

func (_c *MockAPIClient_ContainerExecCreate_Call) Return(_a0 types.IDResponse, _a1 error) *MockAPIClient_ContainerExecCreate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAPIClient_ContainerExecCreate_Call) RunAndReturn(run func(context.Context, string, container.ExecOptions) (types.IDResponse, error)) *MockAPIClient_ContainerExecCreate_Call {
	_c.Call.Return(run)
	return _c
}

// ContainerExecInspect provides a mock function with given fields: ctx, execID
func (_m *MockAPIClient) ContainerExecInspect(ctx context.Context, execID string) (container.ExecInspect, error) {
	ret := _m.Called(ctx, execID)

	if len(ret) == 0 {
		panic("no return value specified for ContainerExecInspect")
	}

	var r0 container.ExecInspect
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (container.ExecInspect, error)); ok {
		return rf(ctx, execID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) container.ExecInspect); ok {
		r0 = rf(ctx, execID)
	} else {
		r0 = ret.Get(0).(container.ExecInspect)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, execID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAPIClient_ContainerExecInspect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ContainerExecInspect'
type MockAPIClient_ContainerExecInspect_Call struct {
	*mock.Call
}

// ContainerExecInspect is a helper method to define mock.On call
//   - ctx context.Context
//   - execID string
func (_e *MockAPIClient_Expecter) ContainerExecInspect(ctx interface{}, execID interface{}) *MockAPIClient_ContainerExecInspect_Call {
	return &MockAPIClient_ContainerExecInspect_Call{Call: _e.mock.On("ContainerExecInspect", ctx, execID)}
}

func (_c *MockAPIClient_ContainerExecInspect_Call) Run(run func(ctx context.Context, execID string)) *MockAPIClient_ContainerExecInspect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockAPIClient_ContainerExecInspect_Call) Return(_a0 container.ExecInspect, _a1 error) *MockAPIClient_ContainerExecInspect_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAPIClient_ContainerExecInspect_Call) RunAndReturn(run func(context.Context, string) (container.ExecInspect, error)) *MockAPIClient_ContainerExecInspect_Call {
	_c.Call.Return(run)
	return _c
}

// ContainerExecResize provides a mock function with given fields: ctx, execID, options
func (_m *MockAPIClient) ContainerExecResize(ctx context.Context, execID string, options container.ResizeOptions) error {
	ret := _m.Called(ctx, execID, options)

	if len(ret) == 0 {
		panic("no return value specified for ContainerExecResize")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, container.ResizeOptions) error); ok {
		r0 = rf(ctx, execID, options)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAPIClient_ContainerExecResize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ContainerExecResize'
type MockAPIClient_ContainerExecResize_Call struct {
	*mock.Call
}

// ContainerExecResize is a helper method to define mock.On call
//   - ctx context.Context
//   - execID string
//   - options container.ResizeOptions
func (_e *MockAPIClient_Expecter) ContainerExecResize(ctx interface{}, execID interface{}, options interface{}) *MockAPIClient_ContainerExecResize_Call {
	return &MockAPIClient_ContainerExecResize_Call{Call: _e.mock.On("ContainerExecResize", ctx, execID, options)}
}

func (_c *MockAPIClient_ContainerExecResize_Call) Run(run func(ctx context.Context, execID string, options container.ResizeOptions)) *MockAPIClient_ContainerExecResize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(container.ResizeOptions))
	})
	return _c
}

func (_c *MockAPIClient_ContainerExecResize_Call) Return(_a0 error) *MockAPIClient_ContainerExecResize_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAPIClient_ContainerExecResize_Call) RunAndReturn(run func(context.Context, string, container.ResizeOptions) error) *MockAPIClient_ContainerExecResize_Call {
	_c.Call.Return(run)
	return _c
}

// ContainerExecStart provides a mock function with given fields: ctx, execID, options
func (_m *MockAPIClient) ContainerExecStart(ctx context.Context, execID string, options container.ExecStartOptions) error {
	ret := _m.Called(ctx, execID, options)

	if len(ret) == 0 {
		panic("no return value specified for ContainerExecStart")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, container.ExecStartOptions) error); ok {
		r0 = rf(ctx, execID, options)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAPIClient_ContainerExecStart_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ContainerExecStart'
type MockAPIClient_ContainerExecStart_Call struct {
	*mock.Call
}

// ContainerExecStart is a helper method to define mock.On call
//   - ctx context.Context
//   - execID string
//   - options container.ExecStartOptions
func (_e *MockAPIClient_Expecter) ContainerExecStart(ctx interface{}, execID interface{}, options interface{}) *MockAPIClient_ContainerExecStart_Call {
	return &MockAPIClient_ContainerExecStart_Call{Call: _e.mock.On("ContainerExecStart", ctx, execID, options)}
}

func (_c *MockAPIClient_ContainerExecStart_Call) Run(run func(ctx context.Context, execID string, options container.ExecStartOptions)) *MockAPIClient_ContainerExecStart_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(container.ExecStartOptions))
	})
	return _c
}

func (_c *MockAPIClient_ContainerExecStart_Call) Return(_a0 error) *MockAPIClient_ContainerExecStart_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAPIClient_ContainerExecStart_Call) RunAndReturn(run func(context.Context, string, container.ExecStartOptions) error) *MockAPIClient_ContainerExecStart_Call {
	_c.Call.Return(run)
	return _c
}

// ContainerExport provides a mock function with given fields: ctx, _a1
func (_m *MockAPIClient) ContainerExport(ctx context.Context, _a1 string) (io.ReadCloser, error) {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ContainerExport")
	}

	var r0 io.ReadCloser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (io.ReadCloser, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) io.ReadCloser); ok {
		r0 = rf(ctx, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAPIClient_ContainerExport_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ContainerExport'
type MockAPIClient_ContainerExport_Call struct {
	*mock.Call
}

// ContainerExport is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 string
func (_e *MockAPIClient_Expecter) ContainerExport(ctx interface{}, _a1 interface{}) *MockAPIClient_ContainerExport_Call {
	return &MockAPIClient_ContainerExport_Call{Call: _e.mock.On("ContainerExport", ctx, _a1)}
}

func (_c *MockAPIClient_ContainerExport_Call) Run(run func(ctx context.Context, _a1 string)) *MockAPIClient_ContainerExport_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockAPIClient_ContainerExport_Call) Return(_a0 io.ReadCloser, _a1 error) *MockAPIClient_ContainerExport_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAPIClient_ContainerExport_Call) RunAndReturn(run func(context.Context, string) (io.ReadCloser, error)) *MockAPIClient_ContainerExport_Call {
	_c.Call.Return(run)
	return _c
}

// ContainerInspect provides a mock function with given fields: ctx, _a1
func (_m *MockAPIClient) ContainerInspect(ctx context.Context, _a1 string) (types.ContainerJSON, error) {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ContainerInspect")
	}

	var r0 types.ContainerJSON
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (types.ContainerJSON, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) types.ContainerJSON); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Get(0).(types.ContainerJSON)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAPIClient_ContainerInspect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ContainerInspect'
type MockAPIClient_ContainerInspect_Call struct {
	*mock.Call
}

// ContainerInspect is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 string
func (_e *MockAPIClient_Expecter) ContainerInspect(ctx interface{}, _a1 interface{}) *MockAPIClient_ContainerInspect_Call {
	return &MockAPIClient_ContainerInspect_Call{Call: _e.mock.On("ContainerInspect", ctx, _a1)}
}

func (_c *MockAPIClient_ContainerInspect_Call) Run(run func(ctx context.Context, _a1 string)) *MockAPIClient_ContainerInspect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockAPIClient_ContainerInspect_Call) Return(_a0 types.ContainerJSON, _a1 error) *MockAPIClient_ContainerInspect_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAPIClient_ContainerInspect_Call) RunAndReturn(run func(context.Context, string) (types.ContainerJSON, error)) *MockAPIClient_ContainerInspect_Call {
	_c.Call.Return(run)
	return _c
}

// ContainerInspectWithRaw provides a mock function with given fields: ctx, _a1, getSize
func (_m *MockAPIClient) ContainerInspectWithRaw(ctx context.Context, _a1 string, getSize bool) (types.ContainerJSON, []byte, error) {
	ret := _m.Called(ctx, _a1, getSize)

	if len(ret) == 0 {
		panic("no return value specified for ContainerInspectWithRaw")
	}

	var r0 types.ContainerJSON
	var r1 []byte
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, bool) (types.ContainerJSON, []byte, error)); ok {
		return rf(ctx, _a1, getSize)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, bool) types.ContainerJSON); ok {
		r0 = rf(ctx, _a1, getSize)
	} else {
		r0 = ret.Get(0).(types.ContainerJSON)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, bool) []byte); ok {
		r1 = rf(ctx, _a1, getSize)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]byte)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, bool) error); ok {
		r2 = rf(ctx, _a1, getSize)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockAPIClient_ContainerInspectWithRaw_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ContainerInspectWithRaw'
type MockAPIClient_ContainerInspectWithRaw_Call struct {
	*mock.Call
}

// ContainerInspectWithRaw is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 string
//   - getSize bool
func (_e *MockAPIClient_Expecter) ContainerInspectWithRaw(ctx interface{}, _a1 interface{}, getSize interface{}) *MockAPIClient_ContainerInspectWithRaw_Call {
	return &MockAPIClient_ContainerInspectWithRaw_Call{Call: _e.mock.On("ContainerInspectWithRaw", ctx, _a1, getSize)}
}

func (_c *MockAPIClient_ContainerInspectWithRaw_Call) Run(run func(ctx context.Context, _a1 string, getSize bool)) *MockAPIClient_ContainerInspectWithRaw_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(bool))
	})
	return _c
}

func (_c *MockAPIClient_ContainerInspectWithRaw_Call) Return(_a0 types.ContainerJSON, _a1 []byte, _a2 error) *MockAPIClient_ContainerInspectWithRaw_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockAPIClient_ContainerInspectWithRaw_Call) RunAndReturn(run func(context.Context, string, bool) (types.ContainerJSON, []byte, error)) *MockAPIClient_ContainerInspectWithRaw_Call {
	_c.Call.Return(run)
	return _c
}

// ContainerKill provides a mock function with given fields: ctx, _a1, signal
func (_m *MockAPIClient) ContainerKill(ctx context.Context, _a1 string, signal string) error {
	ret := _m.Called(ctx, _a1, signal)

	if len(ret) == 0 {
		panic("no return value specified for ContainerKill")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, _a1, signal)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAPIClient_ContainerKill_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ContainerKill'
type MockAPIClient_ContainerKill_Call struct {
	*mock.Call
}

// ContainerKill is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 string
//   - signal string
func (_e *MockAPIClient_Expecter) ContainerKill(ctx interface{}, _a1 interface{}, signal interface{}) *MockAPIClient_ContainerKill_Call {
	return &MockAPIClient_ContainerKill_Call{Call: _e.mock.On("ContainerKill", ctx, _a1, signal)}
}

func (_c *MockAPIClient_ContainerKill_Call) Run(run func(ctx context.Context, _a1 string, signal string)) *MockAPIClient_ContainerKill_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockAPIClient_ContainerKill_Call) Return(_a0 error) *MockAPIClient_ContainerKill_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAPIClient_ContainerKill_Call) RunAndReturn(run func(context.Context, string, string) error) *MockAPIClient_ContainerKill_Call {
	_c.Call.Return(run)
	return _c
}

// ContainerList provides a mock function with given fields: ctx, options
func (_m *MockAPIClient) ContainerList(ctx context.Context, options container.ListOptions) ([]types.Container, error) {
	ret := _m.Called(ctx, options)

	if len(ret) == 0 {
		panic("no return value specified for ContainerList")
	}

	var r0 []types.Container
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, container.ListOptions) ([]types.Container, error)); ok {
		return rf(ctx, options)
	}
	if rf, ok := ret.Get(0).(func(context.Context, container.ListOptions) []types.Container); ok {
		r0 = rf(ctx, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]types.Container)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, container.ListOptions) error); ok {
		r1 = rf(ctx, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAPIClient_ContainerList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ContainerList'
type MockAPIClient_ContainerList_Call struct {
	*mock.Call
}

// ContainerList is a helper method to define mock.On call
//   - ctx context.Context
//   - options container.ListOptions
func (_e *MockAPIClient_Expecter) ContainerList(ctx interface{}, options interface{}) *MockAPIClient_ContainerList_Call {
	return &MockAPIClient_ContainerList_Call{Call: _e.mock.On("ContainerList", ctx, options)}
}

func (_c *MockAPIClient_ContainerList_Call) Run(run func(ctx context.Context, options container.ListOptions)) *MockAPIClient_ContainerList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(container.ListOptions))
	})
	return _c
}

func (_c *MockAPIClient_ContainerList_Call) Return(_a0 []types.Container, _a1 error) *MockAPIClient_ContainerList_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAPIClient_ContainerList_Call) RunAndReturn(run func(context.Context, container.ListOptions) ([]types.Container, error)) *MockAPIClient_ContainerList_Call {
	_c.Call.Return(run)
	return _c
}

// ContainerLogs provides a mock function with given fields: ctx, _a1, options
func (_m *MockAPIClient) ContainerLogs(ctx context.Context, _a1 string, options container.LogsOptions) (io.ReadCloser, error) {
	ret := _m.Called(ctx, _a1, options)

	if len(ret) == 0 {
		panic("no return value specified for ContainerLogs")
	}

	var r0 io.ReadCloser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, container.LogsOptions) (io.ReadCloser, error)); ok {
		return rf(ctx, _a1, options)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, container.LogsOptions) io.ReadCloser); ok {
		r0 = rf(ctx, _a1, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, container.LogsOptions) error); ok {
		r1 = rf(ctx, _a1, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAPIClient_ContainerLogs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ContainerLogs'
type MockAPIClient_ContainerLogs_Call struct {
	*mock.Call
}

// ContainerLogs is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 string
//   - options container.LogsOptions
func (_e *MockAPIClient_Expecter) ContainerLogs(ctx interface{}, _a1 interface{}, options interface{}) *MockAPIClient_ContainerLogs_Call {
	return &MockAPIClient_ContainerLogs_Call{Call: _e.mock.On("ContainerLogs", ctx, _a1, options)}
}

func (_c *MockAPIClient_ContainerLogs_Call) Run(run func(ctx context.Context, _a1 string, options container.LogsOptions)) *MockAPIClient_ContainerLogs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(container.LogsOptions))
	})
	return _c
}

func (_c *MockAPIClient_ContainerLogs_Call) Return(_a0 io.ReadCloser, _a1 error) *MockAPIClient_ContainerLogs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAPIClient_ContainerLogs_Call) RunAndReturn(run func(context.Context, string, container.LogsOptions) (io.ReadCloser, error)) *MockAPIClient_ContainerLogs_Call {
	_c.Call.Return(run)
	return _c
}

// ContainerPause provides a mock function with given fields: ctx, _a1
func (_m *MockAPIClient) ContainerPause(ctx context.Context, _a1 string) error {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ContainerPause")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAPIClient_ContainerPause_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ContainerPause'
type MockAPIClient_ContainerPause_Call struct {
	*mock.Call
}

// ContainerPause is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 string
func (_e *MockAPIClient_Expecter) ContainerPause(ctx interface{}, _a1 interface{}) *MockAPIClient_ContainerPause_Call {
	return &MockAPIClient_ContainerPause_Call{Call: _e.mock.On("ContainerPause", ctx, _a1)}
}

func (_c *MockAPIClient_ContainerPause_Call) Run(run func(ctx context.Context, _a1 string)) *MockAPIClient_ContainerPause_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockAPIClient_ContainerPause_Call) Return(_a0 error) *MockAPIClient_ContainerPause_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAPIClient_ContainerPause_Call) RunAndReturn(run func(context.Context, string) error) *MockAPIClient_ContainerPause_Call {
	_c.Call.Return(run)
	return _c
}

// ContainerRemove provides a mock function with given fields: ctx, _a1, options
func (_m *MockAPIClient) ContainerRemove(ctx context.Context, _a1 string, options container.RemoveOptions) error {
	ret := _m.Called(ctx, _a1, options)

	if len(ret) == 0 {
		panic("no return value specified for ContainerRemove")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, container.RemoveOptions) error); ok {
		r0 = rf(ctx, _a1, options)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAPIClient_ContainerRemove_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ContainerRemove'
type MockAPIClient_ContainerRemove_Call struct {
	*mock.Call
}

// ContainerRemove is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 string
//   - options container.RemoveOptions
func (_e *MockAPIClient_Expecter) ContainerRemove(ctx interface{}, _a1 interface{}, options interface{}) *MockAPIClient_ContainerRemove_Call {
	return &MockAPIClient_ContainerRemove_Call{Call: _e.mock.On("ContainerRemove", ctx, _a1, options)}
}

func (_c *MockAPIClient_ContainerRemove_Call) Run(run func(ctx context.Context, _a1 string, options container.RemoveOptions)) *MockAPIClient_ContainerRemove_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(container.RemoveOptions))
	})
	return _c
}

func (_c *MockAPIClient_ContainerRemove_Call) Return(_a0 error) *MockAPIClient_ContainerRemove_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAPIClient_ContainerRemove_Call) RunAndReturn(run func(context.Context, string, container.RemoveOptions) error) *MockAPIClient_ContainerRemove_Call {
	_c.Call.Return(run)
	return _c
}

// ContainerRename provides a mock function with given fields: ctx, _a1, newContainerName
func (_m *MockAPIClient) ContainerRename(ctx context.Context, _a1 string, newContainerName string) error {
	ret := _m.Called(ctx, _a1, newContainerName)

	if len(ret) == 0 {
		panic("no return value specified for ContainerRename")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, _a1, newContainerName)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAPIClient_ContainerRename_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ContainerRename'
type MockAPIClient_ContainerRename_Call struct {
	*mock.Call
}

// ContainerRename is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 string
//   - newContainerName string
func (_e *MockAPIClient_Expecter) ContainerRename(ctx interface{}, _a1 interface{}, newContainerName interface{}) *MockAPIClient_ContainerRename_Call {
	return &MockAPIClient_ContainerRename_Call{Call: _e.mock.On("ContainerRename", ctx, _a1, newContainerName)}
}

func (_c *MockAPIClient_ContainerRename_Call) Run(run func(ctx context.Context, _a1 string, newContainerName string)) *MockAPIClient_ContainerRename_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockAPIClient_ContainerRename_Call) Return(_a0 error) *MockAPIClient_ContainerRename_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAPIClient_ContainerRename_Call) RunAndReturn(run func(context.Context, string, string) error) *MockAPIClient_ContainerRename_Call {
	_c.Call.Return(run)
	return _c
}

// ContainerResize provides a mock function with given fields: ctx, _a1, options
func (_m *MockAPIClient) ContainerResize(ctx context.Context, _a1 string, options container.ResizeOptions) error {
	ret := _m.Called(ctx, _a1, options)

	if len(ret) == 0 {
		panic("no return value specified for ContainerResize")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, container.ResizeOptions) error); ok {
		r0 = rf(ctx, _a1, options)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAPIClient_ContainerResize_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ContainerResize'
type MockAPIClient_ContainerResize_Call struct {
	*mock.Call
}

// ContainerResize is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 string
//   - options container.ResizeOptions
func (_e *MockAPIClient_Expecter) ContainerResize(ctx interface{}, _a1 interface{}, options interface{}) *MockAPIClient_ContainerResize_Call {
	return &MockAPIClient_ContainerResize_Call{Call: _e.mock.On("ContainerResize", ctx, _a1, options)}
}

func (_c *MockAPIClient_ContainerResize_Call) Run(run func(ctx context.Context, _a1 string, options container.ResizeOptions)) *MockAPIClient_ContainerResize_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(container.ResizeOptions))
	})
	return _c
}

func (_c *MockAPIClient_ContainerResize_Call) Return(_a0 error) *MockAPIClient_ContainerResize_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAPIClient_ContainerResize_Call) RunAndReturn(run func(context.Context, string, container.ResizeOptions) error) *MockAPIClient_ContainerResize_Call {
	_c.Call.Return(run)
	return _c
}

// ContainerRestart provides a mock function with given fields: ctx, _a1, options
func (_m *MockAPIClient) ContainerRestart(ctx context.Context, _a1 string, options container.StopOptions) error {
	ret := _m.Called(ctx, _a1, options)

	if len(ret) == 0 {
		panic("no return value specified for ContainerRestart")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, container.StopOptions) error); ok {
		r0 = rf(ctx, _a1, options)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAPIClient_ContainerRestart_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ContainerRestart'
type MockAPIClient_ContainerRestart_Call struct {
	*mock.Call
}

// ContainerRestart is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 string
//   - options container.StopOptions
func (_e *MockAPIClient_Expecter) ContainerRestart(ctx interface{}, _a1 interface{}, options interface{}) *MockAPIClient_ContainerRestart_Call {
	return &MockAPIClient_ContainerRestart_Call{Call: _e.mock.On("ContainerRestart", ctx, _a1, options)}
}

func (_c *MockAPIClient_ContainerRestart_Call) Run(run func(ctx context.Context, _a1 string, options container.StopOptions)) *MockAPIClient_ContainerRestart_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(container.StopOptions))
	})
	return _c
}

func (_c *MockAPIClient_ContainerRestart_Call) Return(_a0 error) *MockAPIClient_ContainerRestart_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAPIClient_ContainerRestart_Call) RunAndReturn(run func(context.Context, string, container.StopOptions) error) *MockAPIClient_ContainerRestart_Call {
	_c.Call.Return(run)
	return _c
}

// ContainerStart provides a mock function with given fields: ctx, _a1, options
func (_m *MockAPIClient) ContainerStart(ctx context.Context, _a1 string, options container.StartOptions) error {
	ret := _m.Called(ctx, _a1, options)

	if len(ret) == 0 {
		panic("no return value specified for ContainerStart")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, container.StartOptions) error); ok {
		r0 = rf(ctx, _a1, options)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAPIClient_ContainerStart_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ContainerStart'
type MockAPIClient_ContainerStart_Call struct {
	*mock.Call
}

// ContainerStart is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 string
//   - options container.StartOptions
func (_e *MockAPIClient_Expecter) ContainerStart(ctx interface{}, _a1 interface{}, options interface{}) *MockAPIClient_ContainerStart_Call {
	return &MockAPIClient_ContainerStart_Call{Call: _e.mock.On("ContainerStart", ctx, _a1, options)}
}

func (_c *MockAPIClient_ContainerStart_Call) Run(run func(ctx context.Context, _a1 string, options container.StartOptions)) *MockAPIClient_ContainerStart_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(container.StartOptions))
	})
	return _c
}

func (_c *MockAPIClient_ContainerStart_Call) Return(_a0 error) *MockAPIClient_ContainerStart_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAPIClient_ContainerStart_Call) RunAndReturn(run func(context.Context, string, container.StartOptions) error) *MockAPIClient_ContainerStart_Call {
	_c.Call.Return(run)
	return _c
}

// ContainerStatPath provides a mock function with given fields: ctx, _a1, path
func (_m *MockAPIClient) ContainerStatPath(ctx context.Context, _a1 string, path string) (container.PathStat, error) {
	ret := _m.Called(ctx, _a1, path)

	if len(ret) == 0 {
		panic("no return value specified for ContainerStatPath")
	}

	var r0 container.PathStat
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (container.PathStat, error)); ok {
		return rf(ctx, _a1, path)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) container.PathStat); ok {
		r0 = rf(ctx, _a1, path)
	} else {
		r0 = ret.Get(0).(container.PathStat)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, _a1, path)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAPIClient_ContainerStatPath_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ContainerStatPath'
type MockAPIClient_ContainerStatPath_Call struct {
	*mock.Call
}

// ContainerStatPath is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 string
//   - path string
func (_e *MockAPIClient_Expecter) ContainerStatPath(ctx interface{}, _a1 interface{}, path interface{}) *MockAPIClient_ContainerStatPath_Call {
	return &MockAPIClient_ContainerStatPath_Call{Call: _e.mock.On("ContainerStatPath", ctx, _a1, path)}
}

func (_c *MockAPIClient_ContainerStatPath_Call) Run(run func(ctx context.Context, _a1 string, path string)) *MockAPIClient_ContainerStatPath_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockAPIClient_ContainerStatPath_Call) Return(_a0 container.PathStat, _a1 error) *MockAPIClient_ContainerStatPath_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAPIClient_ContainerStatPath_Call) RunAndReturn(run func(context.Context, string, string) (container.PathStat, error)) *MockAPIClient_ContainerStatPath_Call {
	_c.Call.Return(run)
	return _c
}

// ContainerStats provides a mock function with given fields: ctx, _a1, stream
func (_m *MockAPIClient) ContainerStats(ctx context.Context, _a1 string, stream bool) (container.StatsResponseReader, error) {
	ret := _m.Called(ctx, _a1, stream)

	if len(ret) == 0 {
		panic("no return value specified for ContainerStats")
	}

	var r0 container.StatsResponseReader
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, bool) (container.StatsResponseReader, error)); ok {
		return rf(ctx, _a1, stream)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, bool) container.StatsResponseReader); ok {
		r0 = rf(ctx, _a1, stream)
	} else {
		r0 = ret.Get(0).(container.StatsResponseReader)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, bool) error); ok {
		r1 = rf(ctx, _a1, stream)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAPIClient_ContainerStats_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ContainerStats'
type MockAPIClient_ContainerStats_Call struct {
	*mock.Call
}

// ContainerStats is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 string
//   - stream bool
func (_e *MockAPIClient_Expecter) ContainerStats(ctx interface{}, _a1 interface{}, stream interface{}) *MockAPIClient_ContainerStats_Call {
	return &MockAPIClient_ContainerStats_Call{Call: _e.mock.On("ContainerStats", ctx, _a1, stream)}
}

func (_c *MockAPIClient_ContainerStats_Call) Run(run func(ctx context.Context, _a1 string, stream bool)) *MockAPIClient_ContainerStats_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(bool))
	})
	return _c
}

func (_c *MockAPIClient_ContainerStats_Call) Return(_a0 container.StatsResponseReader, _a1 error) *MockAPIClient_ContainerStats_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAPIClient_ContainerStats_Call) RunAndReturn(run func(context.Context, string, bool) (container.StatsResponseReader, error)) *MockAPIClient_ContainerStats_Call {
	_c.Call.Return(run)
	return _c
}

// ContainerStatsOneShot provides a mock function with given fields: ctx, _a1
func (_m *MockAPIClient) ContainerStatsOneShot(ctx context.Context, _a1 string) (container.StatsResponseReader, error) {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ContainerStatsOneShot")
	}

	var r0 container.StatsResponseReader
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (container.StatsResponseReader, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) container.StatsResponseReader); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Get(0).(container.StatsResponseReader)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAPIClient_ContainerStatsOneShot_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ContainerStatsOneShot'
type MockAPIClient_ContainerStatsOneShot_Call struct {
	*mock.Call
}

// ContainerStatsOneShot is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 string
func (_e *MockAPIClient_Expecter) ContainerStatsOneShot(ctx interface{}, _a1 interface{}) *MockAPIClient_ContainerStatsOneShot_Call {
	return &MockAPIClient_ContainerStatsOneShot_Call{Call: _e.mock.On("ContainerStatsOneShot", ctx, _a1)}
}

func (_c *MockAPIClient_ContainerStatsOneShot_Call) Run(run func(ctx context.Context, _a1 string)) *MockAPIClient_ContainerStatsOneShot_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockAPIClient_ContainerStatsOneShot_Call) Return(_a0 container.StatsResponseReader, _a1 error) *MockAPIClient_ContainerStatsOneShot_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAPIClient_ContainerStatsOneShot_Call) RunAndReturn(run func(context.Context, string) (container.StatsResponseReader, error)) *MockAPIClient_ContainerStatsOneShot_Call {
	_c.Call.Return(run)
	return _c
}

// ContainerStop provides a mock function with given fields: ctx, _a1, options
func (_m *MockAPIClient) ContainerStop(ctx context.Context, _a1 string, options container.StopOptions) error {
	ret := _m.Called(ctx, _a1, options)

	if len(ret) == 0 {
		panic("no return value specified for ContainerStop")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, container.StopOptions) error); ok {
		r0 = rf(ctx, _a1, options)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAPIClient_ContainerStop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ContainerStop'
type MockAPIClient_ContainerStop_Call struct {
	*mock.Call
}

// ContainerStop is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 string
//   - options container.StopOptions
func (_e *MockAPIClient_Expecter) ContainerStop(ctx interface{}, _a1 interface{}, options interface{}) *MockAPIClient_ContainerStop_Call {
	return &MockAPIClient_ContainerStop_Call{Call: _e.mock.On("ContainerStop", ctx, _a1, options)}
}

func (_c *MockAPIClient_ContainerStop_Call) Run(run func(ctx context.Context, _a1 string, options container.StopOptions)) *MockAPIClient_ContainerStop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(container.StopOptions))
	})
	return _c
}

func (_c *MockAPIClient_ContainerStop_Call) Return(_a0 error) *MockAPIClient_ContainerStop_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAPIClient_ContainerStop_Call) RunAndReturn(run func(context.Context, string, container.StopOptions) error) *MockAPIClient_ContainerStop_Call {
	_c.Call.Return(run)
	return _c
}

// ContainerTop provides a mock function with given fields: ctx, _a1, arguments
func (_m *MockAPIClient) ContainerTop(ctx context.Context, _a1 string, arguments []string) (container.ContainerTopOKBody, error) {
	ret := _m.Called(ctx, _a1, arguments)

	if len(ret) == 0 {
		panic("no return value specified for ContainerTop")
	}

	var r0 container.ContainerTopOKBody
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []string) (container.ContainerTopOKBody, error)); ok {
		return rf(ctx, _a1, arguments)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, []string) container.ContainerTopOKBody); ok {
		r0 = rf(ctx, _a1, arguments)
	} else {
		r0 = ret.Get(0).(container.ContainerTopOKBody)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, []string) error); ok {
		r1 = rf(ctx, _a1, arguments)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAPIClient_ContainerTop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ContainerTop'
type MockAPIClient_ContainerTop_Call struct {
	*mock.Call
}

// ContainerTop is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 string
//   - arguments []string
func (_e *MockAPIClient_Expecter) ContainerTop(ctx interface{}, _a1 interface{}, arguments interface{}) *MockAPIClient_ContainerTop_Call {
	return &MockAPIClient_ContainerTop_Call{Call: _e.mock.On("ContainerTop", ctx, _a1, arguments)}
}

func (_c *MockAPIClient_ContainerTop_Call) Run(run func(ctx context.Context, _a1 string, arguments []string)) *MockAPIClient_ContainerTop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]string))
	})
	return _c
}

func (_c *MockAPIClient_ContainerTop_Call) Return(_a0 container.ContainerTopOKBody, _a1 error) *MockAPIClient_ContainerTop_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAPIClient_ContainerTop_Call) RunAndReturn(run func(context.Context, string, []string) (container.ContainerTopOKBody, error)) *MockAPIClient_ContainerTop_Call {
	_c.Call.Return(run)
	return _c
}

// ContainerUnpause provides a mock function with given fields: ctx, _a1
func (_m *MockAPIClient) ContainerUnpause(ctx context.Context, _a1 string) error {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ContainerUnpause")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAPIClient_ContainerUnpause_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ContainerUnpause'
type MockAPIClient_ContainerUnpause_Call struct {
	*mock.Call
}

// ContainerUnpause is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 string
func (_e *MockAPIClient_Expecter) ContainerUnpause(ctx interface{}, _a1 interface{}) *MockAPIClient_ContainerUnpause_Call {
	return &MockAPIClient_ContainerUnpause_Call{Call: _e.mock.On("ContainerUnpause", ctx, _a1)}
}

func (_c *MockAPIClient_ContainerUnpause_Call) Run(run func(ctx context.Context, _a1 string)) *MockAPIClient_ContainerUnpause_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockAPIClient_ContainerUnpause_Call) Return(_a0 error) *MockAPIClient_ContainerUnpause_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAPIClient_ContainerUnpause_Call) RunAndReturn(run func(context.Context, string) error) *MockAPIClient_ContainerUnpause_Call {
	_c.Call.Return(run)
	return _c
}

// ContainerUpdate provides a mock function with given fields: ctx, _a1, updateConfig
func (_m *MockAPIClient) ContainerUpdate(ctx context.Context, _a1 string, updateConfig container.UpdateConfig) (container.ContainerUpdateOKBody, error) {
	ret := _m.Called(ctx, _a1, updateConfig)

	if len(ret) == 0 {
		panic("no return value specified for ContainerUpdate")
	}

	var r0 container.ContainerUpdateOKBody
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, container.UpdateConfig) (container.ContainerUpdateOKBody, error)); ok {
		return rf(ctx, _a1, updateConfig)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, container.UpdateConfig) container.ContainerUpdateOKBody); ok {
		r0 = rf(ctx, _a1, updateConfig)
	} else {
		r0 = ret.Get(0).(container.ContainerUpdateOKBody)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, container.UpdateConfig) error); ok {
		r1 = rf(ctx, _a1, updateConfig)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAPIClient_ContainerUpdate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ContainerUpdate'
type MockAPIClient_ContainerUpdate_Call struct {
	*mock.Call
}

// ContainerUpdate is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 string
//   - updateConfig container.UpdateConfig
func (_e *MockAPIClient_Expecter) ContainerUpdate(ctx interface{}, _a1 interface{}, updateConfig interface{}) *MockAPIClient_ContainerUpdate_Call {
	return &MockAPIClient_ContainerUpdate_Call{Call: _e.mock.On("ContainerUpdate", ctx, _a1, updateConfig)}
}

func (_c *MockAPIClient_ContainerUpdate_Call) Run(run func(ctx context.Context, _a1 string, updateConfig container.UpdateConfig)) *MockAPIClient_ContainerUpdate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(container.UpdateConfig))
	})
	return _c
}

func (_c *MockAPIClient_ContainerUpdate_Call) Return(_a0 container.ContainerUpdateOKBody, _a1 error) *MockAPIClient_ContainerUpdate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAPIClient_ContainerUpdate_Call) RunAndReturn(run func(context.Context, string, container.UpdateConfig) (container.ContainerUpdateOKBody, error)) *MockAPIClient_ContainerUpdate_Call {
	_c.Call.Return(run)
	return _c
}

// ContainerWait provides a mock function with given fields: ctx, _a1, condition
func (_m *MockAPIClient) ContainerWait(ctx context.Context, _a1 string, condition container.WaitCondition) (<-chan container.WaitResponse, <-chan error) {
	ret := _m.Called(ctx, _a1, condition)

	if len(ret) == 0 {
		panic("no return value specified for ContainerWait")
	}

	var r0 <-chan container.WaitResponse
	var r1 <-chan error
	if rf, ok := ret.Get(0).(func(context.Context, string, container.WaitCondition) (<-chan container.WaitResponse, <-chan error)); ok {
		return rf(ctx, _a1, condition)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, container.WaitCondition) <-chan container.WaitResponse); ok {
		r0 = rf(ctx, _a1, condition)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan container.WaitResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, container.WaitCondition) <-chan error); ok {
		r1 = rf(ctx, _a1, condition)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(<-chan error)
		}
	}

	return r0, r1
}

// MockAPIClient_ContainerWait_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ContainerWait'
type MockAPIClient_ContainerWait_Call struct {
	*mock.Call
}

// ContainerWait is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 string
//   - condition container.WaitCondition
func (_e *MockAPIClient_Expecter) ContainerWait(ctx interface{}, _a1 interface{}, condition interface{}) *MockAPIClient_ContainerWait_Call {
	return &MockAPIClient_ContainerWait_Call{Call: _e.mock.On("ContainerWait", ctx, _a1, condition)}
}

func (_c *MockAPIClient_ContainerWait_Call) Run(run func(ctx context.Context, _a1 string, condition container.WaitCondition)) *MockAPIClient_ContainerWait_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(container.WaitCondition))
	})
	return _c
}

func (_c *MockAPIClient_ContainerWait_Call) Return(_a0 <-chan container.WaitResponse, _a1 <-chan error) *MockAPIClient_ContainerWait_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAPIClient_ContainerWait_Call) RunAndReturn(run func(context.Context, string, container.WaitCondition) (<-chan container.WaitResponse, <-chan error)) *MockAPIClient_ContainerWait_Call {
	_c.Call.Return(run)
	return _c
}

// ContainersPrune provides a mock function with given fields: ctx, pruneFilters
func (_m *MockAPIClient) ContainersPrune(ctx context.Context, pruneFilters filters.Args) (container.PruneReport, error) {
	ret := _m.Called(ctx, pruneFilters)

	if len(ret) == 0 {
		panic("no return value specified for ContainersPrune")
	}

	var r0 container.PruneReport
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, filters.Args) (container.PruneReport, error)); ok {
		return rf(ctx, pruneFilters)
	}
	if rf, ok := ret.Get(0).(func(context.Context, filters.Args) container.PruneReport); ok {
		r0 = rf(ctx, pruneFilters)
	} else {
		r0 = ret.Get(0).(container.PruneReport)
	}

	if rf, ok := ret.Get(1).(func(context.Context, filters.Args) error); ok {
		r1 = rf(ctx, pruneFilters)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAPIClient_ContainersPrune_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ContainersPrune'
type MockAPIClient_ContainersPrune_Call struct {
	*mock.Call
}

// ContainersPrune is a helper method to define mock.On call
//   - ctx context.Context
//   - pruneFilters filters.Args
func (_e *MockAPIClient_Expecter) ContainersPrune(ctx interface{}, pruneFilters interface{}) *MockAPIClient_ContainersPrune_Call {
	return &MockAPIClient_ContainersPrune_Call{Call: _e.mock.On("ContainersPrune", ctx, pruneFilters)}
}

func (_c *MockAPIClient_ContainersPrune_Call) Run(run func(ctx context.Context, pruneFilters filters.Args)) *MockAPIClient_ContainersPrune_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(filters.Args))
	})
	return _c
}

func (_c *MockAPIClient_ContainersPrune_Call) Return(_a0 container.PruneReport, _a1 error) *MockAPIClient_ContainersPrune_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAPIClient_ContainersPrune_Call) RunAndReturn(run func(context.Context, filters.Args) (container.PruneReport, error)) *MockAPIClient_ContainersPrune_Call {
	_c.Call.Return(run)
	return _c
}

// CopyFromContainer provides a mock function with given fields: ctx, _a1, srcPath
func (_m *MockAPIClient) CopyFromContainer(ctx context.Context, _a1 string, srcPath string) (io.ReadCloser, container.PathStat, error) {
	ret := _m.Called(ctx, _a1, srcPath)

	if len(ret) == 0 {
		panic("no return value specified for CopyFromContainer")
	}

	var r0 io.ReadCloser
	var r1 container.PathStat
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (io.ReadCloser, container.PathStat, error)); ok {
		return rf(ctx, _a1, srcPath)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) io.ReadCloser); ok {
		r0 = rf(ctx, _a1, srcPath)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) container.PathStat); ok {
		r1 = rf(ctx, _a1, srcPath)
	} else {
		r1 = ret.Get(1).(container.PathStat)
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, string) error); ok {
		r2 = rf(ctx, _a1, srcPath)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockAPIClient_CopyFromContainer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CopyFromContainer'
type MockAPIClient_CopyFromContainer_Call struct {
	*mock.Call
}

// CopyFromContainer is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 string
//   - srcPath string
func (_e *MockAPIClient_Expecter) CopyFromContainer(ctx interface{}, _a1 interface{}, srcPath interface{}) *MockAPIClient_CopyFromContainer_Call {
	return &MockAPIClient_CopyFromContainer_Call{Call: _e.mock.On("CopyFromContainer", ctx, _a1, srcPath)}
}

func (_c *MockAPIClient_CopyFromContainer_Call) Run(run func(ctx context.Context, _a1 string, srcPath string)) *MockAPIClient_CopyFromContainer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockAPIClient_CopyFromContainer_Call) Return(_a0 io.ReadCloser, _a1 container.PathStat, _a2 error) *MockAPIClient_CopyFromContainer_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockAPIClient_CopyFromContainer_Call) RunAndReturn(run func(context.Context, string, string) (io.ReadCloser, container.PathStat, error)) *MockAPIClient_CopyFromContainer_Call {
	_c.Call.Return(run)
	return _c
}

// CopyToContainer provides a mock function with given fields: ctx, _a1, path, content, options
func (_m *MockAPIClient) CopyToContainer(ctx context.Context, _a1 string, path string, content io.Reader, options container.CopyToContainerOptions) error {
	ret := _m.Called(ctx, _a1, path, content, options)

	if len(ret) == 0 {
		panic("no return value specified for CopyToContainer")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, io.Reader, container.CopyToContainerOptions) error); ok {
		r0 = rf(ctx, _a1, path, content, options)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAPIClient_CopyToContainer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CopyToContainer'
type MockAPIClient_CopyToContainer_Call struct {
	*mock.Call
}

// CopyToContainer is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 string
//   - path string
//   - content io.Reader
//   - options container.CopyToContainerOptions
func (_e *MockAPIClient_Expecter) CopyToContainer(ctx interface{}, _a1 interface{}, path interface{}, content interface{}, options interface{}) *MockAPIClient_CopyToContainer_Call {
	return &MockAPIClient_CopyToContainer_Call{Call: _e.mock.On("CopyToContainer", ctx, _a1, path, content, options)}
}

func (_c *MockAPIClient_CopyToContainer_Call) Run(run func(ctx context.Context, _a1 string, path string, content io.Reader, options container.CopyToContainerOptions)) *MockAPIClient_CopyToContainer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(io.Reader), args[4].(container.CopyToContainerOptions))
	})
	return _c
}

func (_c *MockAPIClient_CopyToContainer_Call) Return(_a0 error) *MockAPIClient_CopyToContainer_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAPIClient_CopyToContainer_Call) RunAndReturn(run func(context.Context, string, string, io.Reader, container.CopyToContainerOptions) error) *MockAPIClient_CopyToContainer_Call {
	_c.Call.Return(run)
	return _c
}

// DaemonHost provides a mock function with no fields
func (_m *MockAPIClient) DaemonHost() string {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for DaemonHost")
	}

	var r0 string
	if rf, ok := ret.Get(0).(func() string); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(string)
	}

	return r0
}

// MockAPIClient_DaemonHost_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DaemonHost'
type MockAPIClient_DaemonHost_Call struct {
	*mock.Call
}

// DaemonHost is a helper method to define mock.On call
func (_e *MockAPIClient_Expecter) DaemonHost() *MockAPIClient_DaemonHost_Call {
	return &MockAPIClient_DaemonHost_Call{Call: _e.mock.On("DaemonHost")}
}

func (_c *MockAPIClient_DaemonHost_Call) Run(run func()) *MockAPIClient_DaemonHost_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAPIClient_DaemonHost_Call) Return(_a0 string) *MockAPIClient_DaemonHost_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAPIClient_DaemonHost_Call) RunAndReturn(run func() string) *MockAPIClient_DaemonHost_Call {
	_c.Call.Return(run)
	return _c
}

// DialHijack provides a mock function with given fields: ctx, url, proto, meta
func (_m *MockAPIClient) DialHijack(ctx context.Context, url string, proto string, meta map[string][]string) (net.Conn, error) {
	ret := _m.Called(ctx, url, proto, meta)

	if len(ret) == 0 {
		panic("no return value specified for DialHijack")
	}

	var r0 net.Conn
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, map[string][]string) (net.Conn, error)); ok {
		return rf(ctx, url, proto, meta)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string, map[string][]string) net.Conn); ok {
		r0 = rf(ctx, url, proto, meta)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(net.Conn)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string, map[string][]string) error); ok {
		r1 = rf(ctx, url, proto, meta)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAPIClient_DialHijack_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DialHijack'
type MockAPIClient_DialHijack_Call struct {
	*mock.Call
}

// DialHijack is a helper method to define mock.On call
//   - ctx context.Context
//   - url string
//   - proto string
//   - meta map[string][]string
func (_e *MockAPIClient_Expecter) DialHijack(ctx interface{}, url interface{}, proto interface{}, meta interface{}) *MockAPIClient_DialHijack_Call {
	return &MockAPIClient_DialHijack_Call{Call: _e.mock.On("DialHijack", ctx, url, proto, meta)}
}

func (_c *MockAPIClient_DialHijack_Call) Run(run func(ctx context.Context, url string, proto string, meta map[string][]string)) *MockAPIClient_DialHijack_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(map[string][]string))
	})
	return _c
}

func (_c *MockAPIClient_DialHijack_Call) Return(_a0 net.Conn, _a1 error) *MockAPIClient_DialHijack_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAPIClient_DialHijack_Call) RunAndReturn(run func(context.Context, string, string, map[string][]string) (net.Conn, error)) *MockAPIClient_DialHijack_Call {
	_c.Call.Return(run)
	return _c
}

// Dialer provides a mock function with no fields
func (_m *MockAPIClient) Dialer() func(context.Context) (net.Conn, error) {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Dialer")
	}

	var r0 func(context.Context) (net.Conn, error)
	if rf, ok := ret.Get(0).(func() func(context.Context) (net.Conn, error)); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(func(context.Context) (net.Conn, error))
		}
	}

	return r0
}

// MockAPIClient_Dialer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Dialer'
type MockAPIClient_Dialer_Call struct {
	*mock.Call
}

// Dialer is a helper method to define mock.On call
func (_e *MockAPIClient_Expecter) Dialer() *MockAPIClient_Dialer_Call {
	return &MockAPIClient_Dialer_Call{Call: _e.mock.On("Dialer")}
}

func (_c *MockAPIClient_Dialer_Call) Run(run func()) *MockAPIClient_Dialer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAPIClient_Dialer_Call) Return(_a0 func(context.Context) (net.Conn, error)) *MockAPIClient_Dialer_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAPIClient_Dialer_Call) RunAndReturn(run func() func(context.Context) (net.Conn, error)) *MockAPIClient_Dialer_Call {
	_c.Call.Return(run)
	return _c
}

// DiskUsage provides a mock function with given fields: ctx, options
func (_m *MockAPIClient) DiskUsage(ctx context.Context, options types.DiskUsageOptions) (types.DiskUsage, error) {
	ret := _m.Called(ctx, options)

	if len(ret) == 0 {
		panic("no return value specified for DiskUsage")
	}

	var r0 types.DiskUsage
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, types.DiskUsageOptions) (types.DiskUsage, error)); ok {
		return rf(ctx, options)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.DiskUsageOptions) types.DiskUsage); ok {
		r0 = rf(ctx, options)
	} else {
		r0 = ret.Get(0).(types.DiskUsage)
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.DiskUsageOptions) error); ok {
		r1 = rf(ctx, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAPIClient_DiskUsage_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DiskUsage'
type MockAPIClient_DiskUsage_Call struct {
	*mock.Call
}

// DiskUsage is a helper method to define mock.On call
//   - ctx context.Context
//   - options types.DiskUsageOptions
func (_e *MockAPIClient_Expecter) DiskUsage(ctx interface{}, options interface{}) *MockAPIClient_DiskUsage_Call {
	return &MockAPIClient_DiskUsage_Call{Call: _e.mock.On("DiskUsage", ctx, options)}
}

func (_c *MockAPIClient_DiskUsage_Call) Run(run func(ctx context.Context, options types.DiskUsageOptions)) *MockAPIClient_DiskUsage_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.DiskUsageOptions))
	})
	return _c
}

func (_c *MockAPIClient_DiskUsage_Call) Return(_a0 types.DiskUsage, _a1 error) *MockAPIClient_DiskUsage_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAPIClient_DiskUsage_Call) RunAndReturn(run func(context.Context, types.DiskUsageOptions) (types.DiskUsage, error)) *MockAPIClient_DiskUsage_Call {
	_c.Call.Return(run)
	return _c
}

// DistributionInspect provides a mock function with given fields: ctx, _a1, encodedRegistryAuth
func (_m *MockAPIClient) DistributionInspect(ctx context.Context, _a1 string, encodedRegistryAuth string) (registry.DistributionInspect, error) {
	ret := _m.Called(ctx, _a1, encodedRegistryAuth)

	if len(ret) == 0 {
		panic("no return value specified for DistributionInspect")
	}

	var r0 registry.DistributionInspect
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (registry.DistributionInspect, error)); ok {
		return rf(ctx, _a1, encodedRegistryAuth)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) registry.DistributionInspect); ok {
		r0 = rf(ctx, _a1, encodedRegistryAuth)
	} else {
		r0 = ret.Get(0).(registry.DistributionInspect)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, _a1, encodedRegistryAuth)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAPIClient_DistributionInspect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'DistributionInspect'
type MockAPIClient_DistributionInspect_Call struct {
	*mock.Call
}

// DistributionInspect is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 string
//   - encodedRegistryAuth string
func (_e *MockAPIClient_Expecter) DistributionInspect(ctx interface{}, _a1 interface{}, encodedRegistryAuth interface{}) *MockAPIClient_DistributionInspect_Call {
	return &MockAPIClient_DistributionInspect_Call{Call: _e.mock.On("DistributionInspect", ctx, _a1, encodedRegistryAuth)}
}

func (_c *MockAPIClient_DistributionInspect_Call) Run(run func(ctx context.Context, _a1 string, encodedRegistryAuth string)) *MockAPIClient_DistributionInspect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockAPIClient_DistributionInspect_Call) Return(_a0 registry.DistributionInspect, _a1 error) *MockAPIClient_DistributionInspect_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAPIClient_DistributionInspect_Call) RunAndReturn(run func(context.Context, string, string) (registry.DistributionInspect, error)) *MockAPIClient_DistributionInspect_Call {
	_c.Call.Return(run)
	return _c
}

// Events provides a mock function with given fields: ctx, options
func (_m *MockAPIClient) Events(ctx context.Context, options events.ListOptions) (<-chan events.Message, <-chan error) {
	ret := _m.Called(ctx, options)

	if len(ret) == 0 {
		panic("no return value specified for Events")
	}

	var r0 <-chan events.Message
	var r1 <-chan error
	if rf, ok := ret.Get(0).(func(context.Context, events.ListOptions) (<-chan events.Message, <-chan error)); ok {
		return rf(ctx, options)
	}
	if rf, ok := ret.Get(0).(func(context.Context, events.ListOptions) <-chan events.Message); ok {
		r0 = rf(ctx, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(<-chan events.Message)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, events.ListOptions) <-chan error); ok {
		r1 = rf(ctx, options)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).(<-chan error)
		}
	}

	return r0, r1
}

// MockAPIClient_Events_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Events'
type MockAPIClient_Events_Call struct {
	*mock.Call
}

// Events is a helper method to define mock.On call
//   - ctx context.Context
//   - options events.ListOptions
func (_e *MockAPIClient_Expecter) Events(ctx interface{}, options interface{}) *MockAPIClient_Events_Call {
	return &MockAPIClient_Events_Call{Call: _e.mock.On("Events", ctx, options)}
}

func (_c *MockAPIClient_Events_Call) Run(run func(ctx context.Context, options events.ListOptions)) *MockAPIClient_Events_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(events.ListOptions))
	})
	return _c
}

func (_c *MockAPIClient_Events_Call) Return(_a0 <-chan events.Message, _a1 <-chan error) *MockAPIClient_Events_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAPIClient_Events_Call) RunAndReturn(run func(context.Context, events.ListOptions) (<-chan events.Message, <-chan error)) *MockAPIClient_Events_Call {
	_c.Call.Return(run)
	return _c
}

// HTTPClient provides a mock function with no fields
func (_m *MockAPIClient) HTTPClient() *http.Client {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for HTTPClient")
	}

	var r0 *http.Client
	if rf, ok := ret.Get(0).(func() *http.Client); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*http.Client)
		}
	}

	return r0
}

// MockAPIClient_HTTPClient_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'HTTPClient'
type MockAPIClient_HTTPClient_Call struct {
	*mock.Call
}

// HTTPClient is a helper method to define mock.On call
func (_e *MockAPIClient_Expecter) HTTPClient() *MockAPIClient_HTTPClient_Call {
	return &MockAPIClient_HTTPClient_Call{Call: _e.mock.On("HTTPClient")}
}

func (_c *MockAPIClient_HTTPClient_Call) Run(run func()) *MockAPIClient_HTTPClient_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockAPIClient_HTTPClient_Call) Return(_a0 *http.Client) *MockAPIClient_HTTPClient_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAPIClient_HTTPClient_Call) RunAndReturn(run func() *http.Client) *MockAPIClient_HTTPClient_Call {
	_c.Call.Return(run)
	return _c
}

// ImageBuild provides a mock function with given fields: ctx, _a1, options
func (_m *MockAPIClient) ImageBuild(ctx context.Context, _a1 io.Reader, options types.ImageBuildOptions) (types.ImageBuildResponse, error) {
	ret := _m.Called(ctx, _a1, options)

	if len(ret) == 0 {
		panic("no return value specified for ImageBuild")
	}

	var r0 types.ImageBuildResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, io.Reader, types.ImageBuildOptions) (types.ImageBuildResponse, error)); ok {
		return rf(ctx, _a1, options)
	}
	if rf, ok := ret.Get(0).(func(context.Context, io.Reader, types.ImageBuildOptions) types.ImageBuildResponse); ok {
		r0 = rf(ctx, _a1, options)
	} else {
		r0 = ret.Get(0).(types.ImageBuildResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, io.Reader, types.ImageBuildOptions) error); ok {
		r1 = rf(ctx, _a1, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAPIClient_ImageBuild_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ImageBuild'
type MockAPIClient_ImageBuild_Call struct {
	*mock.Call
}

// ImageBuild is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 io.Reader
//   - options types.ImageBuildOptions
func (_e *MockAPIClient_Expecter) ImageBuild(ctx interface{}, _a1 interface{}, options interface{}) *MockAPIClient_ImageBuild_Call {
	return &MockAPIClient_ImageBuild_Call{Call: _e.mock.On("ImageBuild", ctx, _a1, options)}
}

func (_c *MockAPIClient_ImageBuild_Call) Run(run func(ctx context.Context, _a1 io.Reader, options types.ImageBuildOptions)) *MockAPIClient_ImageBuild_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(io.Reader), args[2].(types.ImageBuildOptions))
	})
	return _c
}

func (_c *MockAPIClient_ImageBuild_Call) Return(_a0 types.ImageBuildResponse, _a1 error) *MockAPIClient_ImageBuild_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAPIClient_ImageBuild_Call) RunAndReturn(run func(context.Context, io.Reader, types.ImageBuildOptions) (types.ImageBuildResponse, error)) *MockAPIClient_ImageBuild_Call {
	_c.Call.Return(run)
	return _c
}

// ImageCreate provides a mock function with given fields: ctx, parentReference, options
func (_m *MockAPIClient) ImageCreate(ctx context.Context, parentReference string, options image.CreateOptions) (io.ReadCloser, error) {
	ret := _m.Called(ctx, parentReference, options)

	if len(ret) == 0 {
		panic("no return value specified for ImageCreate")
	}

	var r0 io.ReadCloser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, image.CreateOptions) (io.ReadCloser, error)); ok {
		return rf(ctx, parentReference, options)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, image.CreateOptions) io.ReadCloser); ok {
		r0 = rf(ctx, parentReference, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, image.CreateOptions) error); ok {
		r1 = rf(ctx, parentReference, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAPIClient_ImageCreate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ImageCreate'
type MockAPIClient_ImageCreate_Call struct {
	*mock.Call
}

// ImageCreate is a helper method to define mock.On call
//   - ctx context.Context
//   - parentReference string
//   - options image.CreateOptions
func (_e *MockAPIClient_Expecter) ImageCreate(ctx interface{}, parentReference interface{}, options interface{}) *MockAPIClient_ImageCreate_Call {
	return &MockAPIClient_ImageCreate_Call{Call: _e.mock.On("ImageCreate", ctx, parentReference, options)}
}

func (_c *MockAPIClient_ImageCreate_Call) Run(run func(ctx context.Context, parentReference string, options image.CreateOptions)) *MockAPIClient_ImageCreate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(image.CreateOptions))
	})
	return _c
}

func (_c *MockAPIClient_ImageCreate_Call) Return(_a0 io.ReadCloser, _a1 error) *MockAPIClient_ImageCreate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAPIClient_ImageCreate_Call) RunAndReturn(run func(context.Context, string, image.CreateOptions) (io.ReadCloser, error)) *MockAPIClient_ImageCreate_Call {
	_c.Call.Return(run)
	return _c
}

// ImageHistory provides a mock function with given fields: ctx, _a1
func (_m *MockAPIClient) ImageHistory(ctx context.Context, _a1 string) ([]image.HistoryResponseItem, error) {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ImageHistory")
	}

	var r0 []image.HistoryResponseItem
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) ([]image.HistoryResponseItem, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) []image.HistoryResponseItem); ok {
		r0 = rf(ctx, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]image.HistoryResponseItem)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAPIClient_ImageHistory_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ImageHistory'
type MockAPIClient_ImageHistory_Call struct {
	*mock.Call
}

// ImageHistory is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 string
func (_e *MockAPIClient_Expecter) ImageHistory(ctx interface{}, _a1 interface{}) *MockAPIClient_ImageHistory_Call {
	return &MockAPIClient_ImageHistory_Call{Call: _e.mock.On("ImageHistory", ctx, _a1)}
}

func (_c *MockAPIClient_ImageHistory_Call) Run(run func(ctx context.Context, _a1 string)) *MockAPIClient_ImageHistory_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockAPIClient_ImageHistory_Call) Return(_a0 []image.HistoryResponseItem, _a1 error) *MockAPIClient_ImageHistory_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAPIClient_ImageHistory_Call) RunAndReturn(run func(context.Context, string) ([]image.HistoryResponseItem, error)) *MockAPIClient_ImageHistory_Call {
	_c.Call.Return(run)
	return _c
}

// ImageImport provides a mock function with given fields: ctx, source, ref, options
func (_m *MockAPIClient) ImageImport(ctx context.Context, source image.ImportSource, ref string, options image.ImportOptions) (io.ReadCloser, error) {
	ret := _m.Called(ctx, source, ref, options)

	if len(ret) == 0 {
		panic("no return value specified for ImageImport")
	}

	var r0 io.ReadCloser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, image.ImportSource, string, image.ImportOptions) (io.ReadCloser, error)); ok {
		return rf(ctx, source, ref, options)
	}
	if rf, ok := ret.Get(0).(func(context.Context, image.ImportSource, string, image.ImportOptions) io.ReadCloser); ok {
		r0 = rf(ctx, source, ref, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, image.ImportSource, string, image.ImportOptions) error); ok {
		r1 = rf(ctx, source, ref, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAPIClient_ImageImport_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ImageImport'
type MockAPIClient_ImageImport_Call struct {
	*mock.Call
}

// ImageImport is a helper method to define mock.On call
//   - ctx context.Context
//   - source image.ImportSource
//   - ref string
//   - options image.ImportOptions
func (_e *MockAPIClient_Expecter) ImageImport(ctx interface{}, source interface{}, ref interface{}, options interface{}) *MockAPIClient_ImageImport_Call {
	return &MockAPIClient_ImageImport_Call{Call: _e.mock.On("ImageImport", ctx, source, ref, options)}
}

func (_c *MockAPIClient_ImageImport_Call) Run(run func(ctx context.Context, source image.ImportSource, ref string, options image.ImportOptions)) *MockAPIClient_ImageImport_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(image.ImportSource), args[2].(string), args[3].(image.ImportOptions))
	})
	return _c
}

func (_c *MockAPIClient_ImageImport_Call) Return(_a0 io.ReadCloser, _a1 error) *MockAPIClient_ImageImport_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAPIClient_ImageImport_Call) RunAndReturn(run func(context.Context, image.ImportSource, string, image.ImportOptions) (io.ReadCloser, error)) *MockAPIClient_ImageImport_Call {
	_c.Call.Return(run)
	return _c
}

// ImageInspectWithRaw provides a mock function with given fields: ctx, _a1
func (_m *MockAPIClient) ImageInspectWithRaw(ctx context.Context, _a1 string) (types.ImageInspect, []byte, error) {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for ImageInspectWithRaw")
	}

	var r0 types.ImageInspect
	var r1 []byte
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (types.ImageInspect, []byte, error)); ok {
		return rf(ctx, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) types.ImageInspect); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Get(0).(types.ImageInspect)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) []byte); ok {
		r1 = rf(ctx, _a1)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]byte)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(ctx, _a1)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockAPIClient_ImageInspectWithRaw_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ImageInspectWithRaw'
type MockAPIClient_ImageInspectWithRaw_Call struct {
	*mock.Call
}

// ImageInspectWithRaw is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 string
func (_e *MockAPIClient_Expecter) ImageInspectWithRaw(ctx interface{}, _a1 interface{}) *MockAPIClient_ImageInspectWithRaw_Call {
	return &MockAPIClient_ImageInspectWithRaw_Call{Call: _e.mock.On("ImageInspectWithRaw", ctx, _a1)}
}

func (_c *MockAPIClient_ImageInspectWithRaw_Call) Run(run func(ctx context.Context, _a1 string)) *MockAPIClient_ImageInspectWithRaw_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockAPIClient_ImageInspectWithRaw_Call) Return(_a0 types.ImageInspect, _a1 []byte, _a2 error) *MockAPIClient_ImageInspectWithRaw_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockAPIClient_ImageInspectWithRaw_Call) RunAndReturn(run func(context.Context, string) (types.ImageInspect, []byte, error)) *MockAPIClient_ImageInspectWithRaw_Call {
	_c.Call.Return(run)
	return _c
}

// ImageList provides a mock function with given fields: ctx, options
func (_m *MockAPIClient) ImageList(ctx context.Context, options image.ListOptions) ([]image.Summary, error) {
	ret := _m.Called(ctx, options)

	if len(ret) == 0 {
		panic("no return value specified for ImageList")
	}

	var r0 []image.Summary
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, image.ListOptions) ([]image.Summary, error)); ok {
		return rf(ctx, options)
	}
	if rf, ok := ret.Get(0).(func(context.Context, image.ListOptions) []image.Summary); ok {
		r0 = rf(ctx, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]image.Summary)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, image.ListOptions) error); ok {
		r1 = rf(ctx, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAPIClient_ImageList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ImageList'
type MockAPIClient_ImageList_Call struct {
	*mock.Call
}

// ImageList is a helper method to define mock.On call
//   - ctx context.Context
//   - options image.ListOptions
func (_e *MockAPIClient_Expecter) ImageList(ctx interface{}, options interface{}) *MockAPIClient_ImageList_Call {
	return &MockAPIClient_ImageList_Call{Call: _e.mock.On("ImageList", ctx, options)}
}

func (_c *MockAPIClient_ImageList_Call) Run(run func(ctx context.Context, options image.ListOptions)) *MockAPIClient_ImageList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(image.ListOptions))
	})
	return _c
}

func (_c *MockAPIClient_ImageList_Call) Return(_a0 []image.Summary, _a1 error) *MockAPIClient_ImageList_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAPIClient_ImageList_Call) RunAndReturn(run func(context.Context, image.ListOptions) ([]image.Summary, error)) *MockAPIClient_ImageList_Call {
	_c.Call.Return(run)
	return _c
}

// ImageLoad provides a mock function with given fields: ctx, input, quiet
func (_m *MockAPIClient) ImageLoad(ctx context.Context, input io.Reader, quiet bool) (image.LoadResponse, error) {
	ret := _m.Called(ctx, input, quiet)

	if len(ret) == 0 {
		panic("no return value specified for ImageLoad")
	}

	var r0 image.LoadResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, io.Reader, bool) (image.LoadResponse, error)); ok {
		return rf(ctx, input, quiet)
	}
	if rf, ok := ret.Get(0).(func(context.Context, io.Reader, bool) image.LoadResponse); ok {
		r0 = rf(ctx, input, quiet)
	} else {
		r0 = ret.Get(0).(image.LoadResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, io.Reader, bool) error); ok {
		r1 = rf(ctx, input, quiet)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAPIClient_ImageLoad_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ImageLoad'
type MockAPIClient_ImageLoad_Call struct {
	*mock.Call
}

// ImageLoad is a helper method to define mock.On call
//   - ctx context.Context
//   - input io.Reader
//   - quiet bool
func (_e *MockAPIClient_Expecter) ImageLoad(ctx interface{}, input interface{}, quiet interface{}) *MockAPIClient_ImageLoad_Call {
	return &MockAPIClient_ImageLoad_Call{Call: _e.mock.On("ImageLoad", ctx, input, quiet)}
}

func (_c *MockAPIClient_ImageLoad_Call) Run(run func(ctx context.Context, input io.Reader, quiet bool)) *MockAPIClient_ImageLoad_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(io.Reader), args[2].(bool))
	})
	return _c
}

func (_c *MockAPIClient_ImageLoad_Call) Return(_a0 image.LoadResponse, _a1 error) *MockAPIClient_ImageLoad_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAPIClient_ImageLoad_Call) RunAndReturn(run func(context.Context, io.Reader, bool) (image.LoadResponse, error)) *MockAPIClient_ImageLoad_Call {
	_c.Call.Return(run)
	return _c
}

// ImagePull provides a mock function with given fields: ctx, ref, options
func (_m *MockAPIClient) ImagePull(ctx context.Context, ref string, options image.PullOptions) (io.ReadCloser, error) {
	ret := _m.Called(ctx, ref, options)

	if len(ret) == 0 {
		panic("no return value specified for ImagePull")
	}

	var r0 io.ReadCloser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, image.PullOptions) (io.ReadCloser, error)); ok {
		return rf(ctx, ref, options)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, image.PullOptions) io.ReadCloser); ok {
		r0 = rf(ctx, ref, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, image.PullOptions) error); ok {
		r1 = rf(ctx, ref, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAPIClient_ImagePull_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ImagePull'
type MockAPIClient_ImagePull_Call struct {
	*mock.Call
}

// ImagePull is a helper method to define mock.On call
//   - ctx context.Context
//   - ref string
//   - options image.PullOptions
func (_e *MockAPIClient_Expecter) ImagePull(ctx interface{}, ref interface{}, options interface{}) *MockAPIClient_ImagePull_Call {
	return &MockAPIClient_ImagePull_Call{Call: _e.mock.On("ImagePull", ctx, ref, options)}
}

func (_c *MockAPIClient_ImagePull_Call) Run(run func(ctx context.Context, ref string, options image.PullOptions)) *MockAPIClient_ImagePull_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(image.PullOptions))
	})
	return _c
}

func (_c *MockAPIClient_ImagePull_Call) Return(_a0 io.ReadCloser, _a1 error) *MockAPIClient_ImagePull_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAPIClient_ImagePull_Call) RunAndReturn(run func(context.Context, string, image.PullOptions) (io.ReadCloser, error)) *MockAPIClient_ImagePull_Call {
	_c.Call.Return(run)
	return _c
}

// ImagePush provides a mock function with given fields: ctx, ref, options
func (_m *MockAPIClient) ImagePush(ctx context.Context, ref string, options image.PushOptions) (io.ReadCloser, error) {
	ret := _m.Called(ctx, ref, options)

	if len(ret) == 0 {
		panic("no return value specified for ImagePush")
	}

	var r0 io.ReadCloser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, image.PushOptions) (io.ReadCloser, error)); ok {
		return rf(ctx, ref, options)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, image.PushOptions) io.ReadCloser); ok {
		r0 = rf(ctx, ref, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, image.PushOptions) error); ok {
		r1 = rf(ctx, ref, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAPIClient_ImagePush_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ImagePush'
type MockAPIClient_ImagePush_Call struct {
	*mock.Call
}

// ImagePush is a helper method to define mock.On call
//   - ctx context.Context
//   - ref string
//   - options image.PushOptions
func (_e *MockAPIClient_Expecter) ImagePush(ctx interface{}, ref interface{}, options interface{}) *MockAPIClient_ImagePush_Call {
	return &MockAPIClient_ImagePush_Call{Call: _e.mock.On("ImagePush", ctx, ref, options)}
}

func (_c *MockAPIClient_ImagePush_Call) Run(run func(ctx context.Context, ref string, options image.PushOptions)) *MockAPIClient_ImagePush_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(image.PushOptions))
	})
	return _c
}

func (_c *MockAPIClient_ImagePush_Call) Return(_a0 io.ReadCloser, _a1 error) *MockAPIClient_ImagePush_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAPIClient_ImagePush_Call) RunAndReturn(run func(context.Context, string, image.PushOptions) (io.ReadCloser, error)) *MockAPIClient_ImagePush_Call {
	_c.Call.Return(run)
	return _c
}

// ImageRemove provides a mock function with given fields: ctx, _a1, options
func (_m *MockAPIClient) ImageRemove(ctx context.Context, _a1 string, options image.RemoveOptions) ([]image.DeleteResponse, error) {
	ret := _m.Called(ctx, _a1, options)

	if len(ret) == 0 {
		panic("no return value specified for ImageRemove")
	}

	var r0 []image.DeleteResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, image.RemoveOptions) ([]image.DeleteResponse, error)); ok {
		return rf(ctx, _a1, options)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, image.RemoveOptions) []image.DeleteResponse); ok {
		r0 = rf(ctx, _a1, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]image.DeleteResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, image.RemoveOptions) error); ok {
		r1 = rf(ctx, _a1, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAPIClient_ImageRemove_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ImageRemove'
type MockAPIClient_ImageRemove_Call struct {
	*mock.Call
}

// ImageRemove is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 string
//   - options image.RemoveOptions
func (_e *MockAPIClient_Expecter) ImageRemove(ctx interface{}, _a1 interface{}, options interface{}) *MockAPIClient_ImageRemove_Call {
	return &MockAPIClient_ImageRemove_Call{Call: _e.mock.On("ImageRemove", ctx, _a1, options)}
}

func (_c *MockAPIClient_ImageRemove_Call) Run(run func(ctx context.Context, _a1 string, options image.RemoveOptions)) *MockAPIClient_ImageRemove_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(image.RemoveOptions))
	})
	return _c
}

func (_c *MockAPIClient_ImageRemove_Call) Return(_a0 []image.DeleteResponse, _a1 error) *MockAPIClient_ImageRemove_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAPIClient_ImageRemove_Call) RunAndReturn(run func(context.Context, string, image.RemoveOptions) ([]image.DeleteResponse, error)) *MockAPIClient_ImageRemove_Call {
	_c.Call.Return(run)
	return _c
}

// ImageSave provides a mock function with given fields: ctx, images
func (_m *MockAPIClient) ImageSave(ctx context.Context, images []string) (io.ReadCloser, error) {
	ret := _m.Called(ctx, images)

	if len(ret) == 0 {
		panic("no return value specified for ImageSave")
	}

	var r0 io.ReadCloser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, []string) (io.ReadCloser, error)); ok {
		return rf(ctx, images)
	}
	if rf, ok := ret.Get(0).(func(context.Context, []string) io.ReadCloser); ok {
		r0 = rf(ctx, images)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, []string) error); ok {
		r1 = rf(ctx, images)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAPIClient_ImageSave_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ImageSave'
type MockAPIClient_ImageSave_Call struct {
	*mock.Call
}

// ImageSave is a helper method to define mock.On call
//   - ctx context.Context
//   - images []string
func (_e *MockAPIClient_Expecter) ImageSave(ctx interface{}, images interface{}) *MockAPIClient_ImageSave_Call {
	return &MockAPIClient_ImageSave_Call{Call: _e.mock.On("ImageSave", ctx, images)}
}

func (_c *MockAPIClient_ImageSave_Call) Run(run func(ctx context.Context, images []string)) *MockAPIClient_ImageSave_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].([]string))
	})
	return _c
}

func (_c *MockAPIClient_ImageSave_Call) Return(_a0 io.ReadCloser, _a1 error) *MockAPIClient_ImageSave_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAPIClient_ImageSave_Call) RunAndReturn(run func(context.Context, []string) (io.ReadCloser, error)) *MockAPIClient_ImageSave_Call {
	_c.Call.Return(run)
	return _c
}

// ImageSearch provides a mock function with given fields: ctx, term, options
func (_m *MockAPIClient) ImageSearch(ctx context.Context, term string, options registry.SearchOptions) ([]registry.SearchResult, error) {
	ret := _m.Called(ctx, term, options)

	if len(ret) == 0 {
		panic("no return value specified for ImageSearch")
	}

	var r0 []registry.SearchResult
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, registry.SearchOptions) ([]registry.SearchResult, error)); ok {
		return rf(ctx, term, options)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, registry.SearchOptions) []registry.SearchResult); ok {
		r0 = rf(ctx, term, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]registry.SearchResult)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, registry.SearchOptions) error); ok {
		r1 = rf(ctx, term, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAPIClient_ImageSearch_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ImageSearch'
type MockAPIClient_ImageSearch_Call struct {
	*mock.Call
}

// ImageSearch is a helper method to define mock.On call
//   - ctx context.Context
//   - term string
//   - options registry.SearchOptions
func (_e *MockAPIClient_Expecter) ImageSearch(ctx interface{}, term interface{}, options interface{}) *MockAPIClient_ImageSearch_Call {
	return &MockAPIClient_ImageSearch_Call{Call: _e.mock.On("ImageSearch", ctx, term, options)}
}

func (_c *MockAPIClient_ImageSearch_Call) Run(run func(ctx context.Context, term string, options registry.SearchOptions)) *MockAPIClient_ImageSearch_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(registry.SearchOptions))
	})
	return _c
}

func (_c *MockAPIClient_ImageSearch_Call) Return(_a0 []registry.SearchResult, _a1 error) *MockAPIClient_ImageSearch_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAPIClient_ImageSearch_Call) RunAndReturn(run func(context.Context, string, registry.SearchOptions) ([]registry.SearchResult, error)) *MockAPIClient_ImageSearch_Call {
	_c.Call.Return(run)
	return _c
}

// ImageTag provides a mock function with given fields: ctx, _a1, ref
func (_m *MockAPIClient) ImageTag(ctx context.Context, _a1 string, ref string) error {
	ret := _m.Called(ctx, _a1, ref)

	if len(ret) == 0 {
		panic("no return value specified for ImageTag")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) error); ok {
		r0 = rf(ctx, _a1, ref)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAPIClient_ImageTag_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ImageTag'
type MockAPIClient_ImageTag_Call struct {
	*mock.Call
}

// ImageTag is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 string
//   - ref string
func (_e *MockAPIClient_Expecter) ImageTag(ctx interface{}, _a1 interface{}, ref interface{}) *MockAPIClient_ImageTag_Call {
	return &MockAPIClient_ImageTag_Call{Call: _e.mock.On("ImageTag", ctx, _a1, ref)}
}

func (_c *MockAPIClient_ImageTag_Call) Run(run func(ctx context.Context, _a1 string, ref string)) *MockAPIClient_ImageTag_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockAPIClient_ImageTag_Call) Return(_a0 error) *MockAPIClient_ImageTag_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAPIClient_ImageTag_Call) RunAndReturn(run func(context.Context, string, string) error) *MockAPIClient_ImageTag_Call {
	_c.Call.Return(run)
	return _c
}

// ImagesPrune provides a mock function with given fields: ctx, pruneFilter
func (_m *MockAPIClient) ImagesPrune(ctx context.Context, pruneFilter filters.Args) (image.PruneReport, error) {
	ret := _m.Called(ctx, pruneFilter)

	if len(ret) == 0 {
		panic("no return value specified for ImagesPrune")
	}

	var r0 image.PruneReport
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, filters.Args) (image.PruneReport, error)); ok {
		return rf(ctx, pruneFilter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, filters.Args) image.PruneReport); ok {
		r0 = rf(ctx, pruneFilter)
	} else {
		r0 = ret.Get(0).(image.PruneReport)
	}

	if rf, ok := ret.Get(1).(func(context.Context, filters.Args) error); ok {
		r1 = rf(ctx, pruneFilter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAPIClient_ImagesPrune_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ImagesPrune'
type MockAPIClient_ImagesPrune_Call struct {
	*mock.Call
}

// ImagesPrune is a helper method to define mock.On call
//   - ctx context.Context
//   - pruneFilter filters.Args
func (_e *MockAPIClient_Expecter) ImagesPrune(ctx interface{}, pruneFilter interface{}) *MockAPIClient_ImagesPrune_Call {
	return &MockAPIClient_ImagesPrune_Call{Call: _e.mock.On("ImagesPrune", ctx, pruneFilter)}
}

func (_c *MockAPIClient_ImagesPrune_Call) Run(run func(ctx context.Context, pruneFilter filters.Args)) *MockAPIClient_ImagesPrune_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(filters.Args))
	})
	return _c
}

func (_c *MockAPIClient_ImagesPrune_Call) Return(_a0 image.PruneReport, _a1 error) *MockAPIClient_ImagesPrune_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAPIClient_ImagesPrune_Call) RunAndReturn(run func(context.Context, filters.Args) (image.PruneReport, error)) *MockAPIClient_ImagesPrune_Call {
	_c.Call.Return(run)
	return _c
}

// Info provides a mock function with given fields: ctx
func (_m *MockAPIClient) Info(ctx context.Context) (system.Info, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Info")
	}

	var r0 system.Info
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (system.Info, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) system.Info); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(system.Info)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAPIClient_Info_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Info'
type MockAPIClient_Info_Call struct {
	*mock.Call
}

// Info is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockAPIClient_Expecter) Info(ctx interface{}) *MockAPIClient_Info_Call {
	return &MockAPIClient_Info_Call{Call: _e.mock.On("Info", ctx)}
}

func (_c *MockAPIClient_Info_Call) Run(run func(ctx context.Context)) *MockAPIClient_Info_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockAPIClient_Info_Call) Return(_a0 system.Info, _a1 error) *MockAPIClient_Info_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAPIClient_Info_Call) RunAndReturn(run func(context.Context) (system.Info, error)) *MockAPIClient_Info_Call {
	_c.Call.Return(run)
	return _c
}

// NegotiateAPIVersion provides a mock function with given fields: ctx
func (_m *MockAPIClient) NegotiateAPIVersion(ctx context.Context) {
	_m.Called(ctx)
}

// MockAPIClient_NegotiateAPIVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NegotiateAPIVersion'
type MockAPIClient_NegotiateAPIVersion_Call struct {
	*mock.Call
}

// NegotiateAPIVersion is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockAPIClient_Expecter) NegotiateAPIVersion(ctx interface{}) *MockAPIClient_NegotiateAPIVersion_Call {
	return &MockAPIClient_NegotiateAPIVersion_Call{Call: _e.mock.On("NegotiateAPIVersion", ctx)}
}

func (_c *MockAPIClient_NegotiateAPIVersion_Call) Run(run func(ctx context.Context)) *MockAPIClient_NegotiateAPIVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockAPIClient_NegotiateAPIVersion_Call) Return() *MockAPIClient_NegotiateAPIVersion_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockAPIClient_NegotiateAPIVersion_Call) RunAndReturn(run func(context.Context)) *MockAPIClient_NegotiateAPIVersion_Call {
	_c.Run(run)
	return _c
}

// NegotiateAPIVersionPing provides a mock function with given fields: _a0
func (_m *MockAPIClient) NegotiateAPIVersionPing(_a0 types.Ping) {
	_m.Called(_a0)
}

// MockAPIClient_NegotiateAPIVersionPing_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NegotiateAPIVersionPing'
type MockAPIClient_NegotiateAPIVersionPing_Call struct {
	*mock.Call
}

// NegotiateAPIVersionPing is a helper method to define mock.On call
//   - _a0 types.Ping
func (_e *MockAPIClient_Expecter) NegotiateAPIVersionPing(_a0 interface{}) *MockAPIClient_NegotiateAPIVersionPing_Call {
	return &MockAPIClient_NegotiateAPIVersionPing_Call{Call: _e.mock.On("NegotiateAPIVersionPing", _a0)}
}

func (_c *MockAPIClient_NegotiateAPIVersionPing_Call) Run(run func(_a0 types.Ping)) *MockAPIClient_NegotiateAPIVersionPing_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(types.Ping))
	})
	return _c
}

func (_c *MockAPIClient_NegotiateAPIVersionPing_Call) Return() *MockAPIClient_NegotiateAPIVersionPing_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockAPIClient_NegotiateAPIVersionPing_Call) RunAndReturn(run func(types.Ping)) *MockAPIClient_NegotiateAPIVersionPing_Call {
	_c.Run(run)
	return _c
}

// NetworkConnect provides a mock function with given fields: ctx, _a1, _a2, config
func (_m *MockAPIClient) NetworkConnect(ctx context.Context, _a1 string, _a2 string, config *network.EndpointSettings) error {
	ret := _m.Called(ctx, _a1, _a2, config)

	if len(ret) == 0 {
		panic("no return value specified for NetworkConnect")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, *network.EndpointSettings) error); ok {
		r0 = rf(ctx, _a1, _a2, config)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAPIClient_NetworkConnect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NetworkConnect'
type MockAPIClient_NetworkConnect_Call struct {
	*mock.Call
}

// NetworkConnect is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 string
//   - _a2 string
//   - config *network.EndpointSettings
func (_e *MockAPIClient_Expecter) NetworkConnect(ctx interface{}, _a1 interface{}, _a2 interface{}, config interface{}) *MockAPIClient_NetworkConnect_Call {
	return &MockAPIClient_NetworkConnect_Call{Call: _e.mock.On("NetworkConnect", ctx, _a1, _a2, config)}
}

func (_c *MockAPIClient_NetworkConnect_Call) Run(run func(ctx context.Context, _a1 string, _a2 string, config *network.EndpointSettings)) *MockAPIClient_NetworkConnect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(*network.EndpointSettings))
	})
	return _c
}

func (_c *MockAPIClient_NetworkConnect_Call) Return(_a0 error) *MockAPIClient_NetworkConnect_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAPIClient_NetworkConnect_Call) RunAndReturn(run func(context.Context, string, string, *network.EndpointSettings) error) *MockAPIClient_NetworkConnect_Call {
	_c.Call.Return(run)
	return _c
}

// NetworkCreate provides a mock function with given fields: ctx, name, options
func (_m *MockAPIClient) NetworkCreate(ctx context.Context, name string, options network.CreateOptions) (network.CreateResponse, error) {
	ret := _m.Called(ctx, name, options)

	if len(ret) == 0 {
		panic("no return value specified for NetworkCreate")
	}

	var r0 network.CreateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, network.CreateOptions) (network.CreateResponse, error)); ok {
		return rf(ctx, name, options)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, network.CreateOptions) network.CreateResponse); ok {
		r0 = rf(ctx, name, options)
	} else {
		r0 = ret.Get(0).(network.CreateResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, network.CreateOptions) error); ok {
		r1 = rf(ctx, name, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAPIClient_NetworkCreate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NetworkCreate'
type MockAPIClient_NetworkCreate_Call struct {
	*mock.Call
}

// NetworkCreate is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - options network.CreateOptions
func (_e *MockAPIClient_Expecter) NetworkCreate(ctx interface{}, name interface{}, options interface{}) *MockAPIClient_NetworkCreate_Call {
	return &MockAPIClient_NetworkCreate_Call{Call: _e.mock.On("NetworkCreate", ctx, name, options)}
}

func (_c *MockAPIClient_NetworkCreate_Call) Run(run func(ctx context.Context, name string, options network.CreateOptions)) *MockAPIClient_NetworkCreate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(network.CreateOptions))
	})
	return _c
}

func (_c *MockAPIClient_NetworkCreate_Call) Return(_a0 network.CreateResponse, _a1 error) *MockAPIClient_NetworkCreate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAPIClient_NetworkCreate_Call) RunAndReturn(run func(context.Context, string, network.CreateOptions) (network.CreateResponse, error)) *MockAPIClient_NetworkCreate_Call {
	_c.Call.Return(run)
	return _c
}

// NetworkDisconnect provides a mock function with given fields: ctx, _a1, _a2, force
func (_m *MockAPIClient) NetworkDisconnect(ctx context.Context, _a1 string, _a2 string, force bool) error {
	ret := _m.Called(ctx, _a1, _a2, force)

	if len(ret) == 0 {
		panic("no return value specified for NetworkDisconnect")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string, bool) error); ok {
		r0 = rf(ctx, _a1, _a2, force)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAPIClient_NetworkDisconnect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NetworkDisconnect'
type MockAPIClient_NetworkDisconnect_Call struct {
	*mock.Call
}

// NetworkDisconnect is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 string
//   - _a2 string
//   - force bool
func (_e *MockAPIClient_Expecter) NetworkDisconnect(ctx interface{}, _a1 interface{}, _a2 interface{}, force interface{}) *MockAPIClient_NetworkDisconnect_Call {
	return &MockAPIClient_NetworkDisconnect_Call{Call: _e.mock.On("NetworkDisconnect", ctx, _a1, _a2, force)}
}

func (_c *MockAPIClient_NetworkDisconnect_Call) Run(run func(ctx context.Context, _a1 string, _a2 string, force bool)) *MockAPIClient_NetworkDisconnect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string), args[3].(bool))
	})
	return _c
}

func (_c *MockAPIClient_NetworkDisconnect_Call) Return(_a0 error) *MockAPIClient_NetworkDisconnect_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAPIClient_NetworkDisconnect_Call) RunAndReturn(run func(context.Context, string, string, bool) error) *MockAPIClient_NetworkDisconnect_Call {
	_c.Call.Return(run)
	return _c
}

// NetworkInspect provides a mock function with given fields: ctx, _a1, options
func (_m *MockAPIClient) NetworkInspect(ctx context.Context, _a1 string, options network.InspectOptions) (network.Inspect, error) {
	ret := _m.Called(ctx, _a1, options)

	if len(ret) == 0 {
		panic("no return value specified for NetworkInspect")
	}

	var r0 network.Inspect
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, network.InspectOptions) (network.Inspect, error)); ok {
		return rf(ctx, _a1, options)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, network.InspectOptions) network.Inspect); ok {
		r0 = rf(ctx, _a1, options)
	} else {
		r0 = ret.Get(0).(network.Inspect)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, network.InspectOptions) error); ok {
		r1 = rf(ctx, _a1, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAPIClient_NetworkInspect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NetworkInspect'
type MockAPIClient_NetworkInspect_Call struct {
	*mock.Call
}

// NetworkInspect is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 string
//   - options network.InspectOptions
func (_e *MockAPIClient_Expecter) NetworkInspect(ctx interface{}, _a1 interface{}, options interface{}) *MockAPIClient_NetworkInspect_Call {
	return &MockAPIClient_NetworkInspect_Call{Call: _e.mock.On("NetworkInspect", ctx, _a1, options)}
}

func (_c *MockAPIClient_NetworkInspect_Call) Run(run func(ctx context.Context, _a1 string, options network.InspectOptions)) *MockAPIClient_NetworkInspect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(network.InspectOptions))
	})
	return _c
}

func (_c *MockAPIClient_NetworkInspect_Call) Return(_a0 network.Inspect, _a1 error) *MockAPIClient_NetworkInspect_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAPIClient_NetworkInspect_Call) RunAndReturn(run func(context.Context, string, network.InspectOptions) (network.Inspect, error)) *MockAPIClient_NetworkInspect_Call {
	_c.Call.Return(run)
	return _c
}

// NetworkInspectWithRaw provides a mock function with given fields: ctx, _a1, options
func (_m *MockAPIClient) NetworkInspectWithRaw(ctx context.Context, _a1 string, options network.InspectOptions) (network.Inspect, []byte, error) {
	ret := _m.Called(ctx, _a1, options)

	if len(ret) == 0 {
		panic("no return value specified for NetworkInspectWithRaw")
	}

	var r0 network.Inspect
	var r1 []byte
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, network.InspectOptions) (network.Inspect, []byte, error)); ok {
		return rf(ctx, _a1, options)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, network.InspectOptions) network.Inspect); ok {
		r0 = rf(ctx, _a1, options)
	} else {
		r0 = ret.Get(0).(network.Inspect)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, network.InspectOptions) []byte); ok {
		r1 = rf(ctx, _a1, options)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]byte)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, network.InspectOptions) error); ok {
		r2 = rf(ctx, _a1, options)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockAPIClient_NetworkInspectWithRaw_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NetworkInspectWithRaw'
type MockAPIClient_NetworkInspectWithRaw_Call struct {
	*mock.Call
}

// NetworkInspectWithRaw is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 string
//   - options network.InspectOptions
func (_e *MockAPIClient_Expecter) NetworkInspectWithRaw(ctx interface{}, _a1 interface{}, options interface{}) *MockAPIClient_NetworkInspectWithRaw_Call {
	return &MockAPIClient_NetworkInspectWithRaw_Call{Call: _e.mock.On("NetworkInspectWithRaw", ctx, _a1, options)}
}

func (_c *MockAPIClient_NetworkInspectWithRaw_Call) Run(run func(ctx context.Context, _a1 string, options network.InspectOptions)) *MockAPIClient_NetworkInspectWithRaw_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(network.InspectOptions))
	})
	return _c
}

func (_c *MockAPIClient_NetworkInspectWithRaw_Call) Return(_a0 network.Inspect, _a1 []byte, _a2 error) *MockAPIClient_NetworkInspectWithRaw_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockAPIClient_NetworkInspectWithRaw_Call) RunAndReturn(run func(context.Context, string, network.InspectOptions) (network.Inspect, []byte, error)) *MockAPIClient_NetworkInspectWithRaw_Call {
	_c.Call.Return(run)
	return _c
}

// NetworkList provides a mock function with given fields: ctx, options
func (_m *MockAPIClient) NetworkList(ctx context.Context, options network.ListOptions) ([]network.Inspect, error) {
	ret := _m.Called(ctx, options)

	if len(ret) == 0 {
		panic("no return value specified for NetworkList")
	}

	var r0 []network.Inspect
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, network.ListOptions) ([]network.Inspect, error)); ok {
		return rf(ctx, options)
	}
	if rf, ok := ret.Get(0).(func(context.Context, network.ListOptions) []network.Inspect); ok {
		r0 = rf(ctx, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]network.Inspect)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, network.ListOptions) error); ok {
		r1 = rf(ctx, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAPIClient_NetworkList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NetworkList'
type MockAPIClient_NetworkList_Call struct {
	*mock.Call
}

// NetworkList is a helper method to define mock.On call
//   - ctx context.Context
//   - options network.ListOptions
func (_e *MockAPIClient_Expecter) NetworkList(ctx interface{}, options interface{}) *MockAPIClient_NetworkList_Call {
	return &MockAPIClient_NetworkList_Call{Call: _e.mock.On("NetworkList", ctx, options)}
}

func (_c *MockAPIClient_NetworkList_Call) Run(run func(ctx context.Context, options network.ListOptions)) *MockAPIClient_NetworkList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(network.ListOptions))
	})
	return _c
}

func (_c *MockAPIClient_NetworkList_Call) Return(_a0 []network.Inspect, _a1 error) *MockAPIClient_NetworkList_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAPIClient_NetworkList_Call) RunAndReturn(run func(context.Context, network.ListOptions) ([]network.Inspect, error)) *MockAPIClient_NetworkList_Call {
	_c.Call.Return(run)
	return _c
}

// NetworkRemove provides a mock function with given fields: ctx, _a1
func (_m *MockAPIClient) NetworkRemove(ctx context.Context, _a1 string) error {
	ret := _m.Called(ctx, _a1)

	if len(ret) == 0 {
		panic("no return value specified for NetworkRemove")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, _a1)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAPIClient_NetworkRemove_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NetworkRemove'
type MockAPIClient_NetworkRemove_Call struct {
	*mock.Call
}

// NetworkRemove is a helper method to define mock.On call
//   - ctx context.Context
//   - _a1 string
func (_e *MockAPIClient_Expecter) NetworkRemove(ctx interface{}, _a1 interface{}) *MockAPIClient_NetworkRemove_Call {
	return &MockAPIClient_NetworkRemove_Call{Call: _e.mock.On("NetworkRemove", ctx, _a1)}
}

func (_c *MockAPIClient_NetworkRemove_Call) Run(run func(ctx context.Context, _a1 string)) *MockAPIClient_NetworkRemove_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockAPIClient_NetworkRemove_Call) Return(_a0 error) *MockAPIClient_NetworkRemove_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAPIClient_NetworkRemove_Call) RunAndReturn(run func(context.Context, string) error) *MockAPIClient_NetworkRemove_Call {
	_c.Call.Return(run)
	return _c
}

// NetworksPrune provides a mock function with given fields: ctx, pruneFilter
func (_m *MockAPIClient) NetworksPrune(ctx context.Context, pruneFilter filters.Args) (network.PruneReport, error) {
	ret := _m.Called(ctx, pruneFilter)

	if len(ret) == 0 {
		panic("no return value specified for NetworksPrune")
	}

	var r0 network.PruneReport
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, filters.Args) (network.PruneReport, error)); ok {
		return rf(ctx, pruneFilter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, filters.Args) network.PruneReport); ok {
		r0 = rf(ctx, pruneFilter)
	} else {
		r0 = ret.Get(0).(network.PruneReport)
	}

	if rf, ok := ret.Get(1).(func(context.Context, filters.Args) error); ok {
		r1 = rf(ctx, pruneFilter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAPIClient_NetworksPrune_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NetworksPrune'
type MockAPIClient_NetworksPrune_Call struct {
	*mock.Call
}

// NetworksPrune is a helper method to define mock.On call
//   - ctx context.Context
//   - pruneFilter filters.Args
func (_e *MockAPIClient_Expecter) NetworksPrune(ctx interface{}, pruneFilter interface{}) *MockAPIClient_NetworksPrune_Call {
	return &MockAPIClient_NetworksPrune_Call{Call: _e.mock.On("NetworksPrune", ctx, pruneFilter)}
}

func (_c *MockAPIClient_NetworksPrune_Call) Run(run func(ctx context.Context, pruneFilter filters.Args)) *MockAPIClient_NetworksPrune_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(filters.Args))
	})
	return _c
}

func (_c *MockAPIClient_NetworksPrune_Call) Return(_a0 network.PruneReport, _a1 error) *MockAPIClient_NetworksPrune_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAPIClient_NetworksPrune_Call) RunAndReturn(run func(context.Context, filters.Args) (network.PruneReport, error)) *MockAPIClient_NetworksPrune_Call {
	_c.Call.Return(run)
	return _c
}

// NodeInspectWithRaw provides a mock function with given fields: ctx, nodeID
func (_m *MockAPIClient) NodeInspectWithRaw(ctx context.Context, nodeID string) (swarm.Node, []byte, error) {
	ret := _m.Called(ctx, nodeID)

	if len(ret) == 0 {
		panic("no return value specified for NodeInspectWithRaw")
	}

	var r0 swarm.Node
	var r1 []byte
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (swarm.Node, []byte, error)); ok {
		return rf(ctx, nodeID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) swarm.Node); ok {
		r0 = rf(ctx, nodeID)
	} else {
		r0 = ret.Get(0).(swarm.Node)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) []byte); ok {
		r1 = rf(ctx, nodeID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]byte)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(ctx, nodeID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockAPIClient_NodeInspectWithRaw_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NodeInspectWithRaw'
type MockAPIClient_NodeInspectWithRaw_Call struct {
	*mock.Call
}

// NodeInspectWithRaw is a helper method to define mock.On call
//   - ctx context.Context
//   - nodeID string
func (_e *MockAPIClient_Expecter) NodeInspectWithRaw(ctx interface{}, nodeID interface{}) *MockAPIClient_NodeInspectWithRaw_Call {
	return &MockAPIClient_NodeInspectWithRaw_Call{Call: _e.mock.On("NodeInspectWithRaw", ctx, nodeID)}
}

func (_c *MockAPIClient_NodeInspectWithRaw_Call) Run(run func(ctx context.Context, nodeID string)) *MockAPIClient_NodeInspectWithRaw_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockAPIClient_NodeInspectWithRaw_Call) Return(_a0 swarm.Node, _a1 []byte, _a2 error) *MockAPIClient_NodeInspectWithRaw_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockAPIClient_NodeInspectWithRaw_Call) RunAndReturn(run func(context.Context, string) (swarm.Node, []byte, error)) *MockAPIClient_NodeInspectWithRaw_Call {
	_c.Call.Return(run)
	return _c
}

// NodeList provides a mock function with given fields: ctx, options
func (_m *MockAPIClient) NodeList(ctx context.Context, options types.NodeListOptions) ([]swarm.Node, error) {
	ret := _m.Called(ctx, options)

	if len(ret) == 0 {
		panic("no return value specified for NodeList")
	}

	var r0 []swarm.Node
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, types.NodeListOptions) ([]swarm.Node, error)); ok {
		return rf(ctx, options)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.NodeListOptions) []swarm.Node); ok {
		r0 = rf(ctx, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]swarm.Node)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.NodeListOptions) error); ok {
		r1 = rf(ctx, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAPIClient_NodeList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NodeList'
type MockAPIClient_NodeList_Call struct {
	*mock.Call
}

// NodeList is a helper method to define mock.On call
//   - ctx context.Context
//   - options types.NodeListOptions
func (_e *MockAPIClient_Expecter) NodeList(ctx interface{}, options interface{}) *MockAPIClient_NodeList_Call {
	return &MockAPIClient_NodeList_Call{Call: _e.mock.On("NodeList", ctx, options)}
}

func (_c *MockAPIClient_NodeList_Call) Run(run func(ctx context.Context, options types.NodeListOptions)) *MockAPIClient_NodeList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.NodeListOptions))
	})
	return _c
}

func (_c *MockAPIClient_NodeList_Call) Return(_a0 []swarm.Node, _a1 error) *MockAPIClient_NodeList_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAPIClient_NodeList_Call) RunAndReturn(run func(context.Context, types.NodeListOptions) ([]swarm.Node, error)) *MockAPIClient_NodeList_Call {
	_c.Call.Return(run)
	return _c
}

// NodeRemove provides a mock function with given fields: ctx, nodeID, options
func (_m *MockAPIClient) NodeRemove(ctx context.Context, nodeID string, options types.NodeRemoveOptions) error {
	ret := _m.Called(ctx, nodeID, options)

	if len(ret) == 0 {
		panic("no return value specified for NodeRemove")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, types.NodeRemoveOptions) error); ok {
		r0 = rf(ctx, nodeID, options)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAPIClient_NodeRemove_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NodeRemove'
type MockAPIClient_NodeRemove_Call struct {
	*mock.Call
}

// NodeRemove is a helper method to define mock.On call
//   - ctx context.Context
//   - nodeID string
//   - options types.NodeRemoveOptions
func (_e *MockAPIClient_Expecter) NodeRemove(ctx interface{}, nodeID interface{}, options interface{}) *MockAPIClient_NodeRemove_Call {
	return &MockAPIClient_NodeRemove_Call{Call: _e.mock.On("NodeRemove", ctx, nodeID, options)}
}

func (_c *MockAPIClient_NodeRemove_Call) Run(run func(ctx context.Context, nodeID string, options types.NodeRemoveOptions)) *MockAPIClient_NodeRemove_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(types.NodeRemoveOptions))
	})
	return _c
}

func (_c *MockAPIClient_NodeRemove_Call) Return(_a0 error) *MockAPIClient_NodeRemove_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAPIClient_NodeRemove_Call) RunAndReturn(run func(context.Context, string, types.NodeRemoveOptions) error) *MockAPIClient_NodeRemove_Call {
	_c.Call.Return(run)
	return _c
}

// NodeUpdate provides a mock function with given fields: ctx, nodeID, version, node
func (_m *MockAPIClient) NodeUpdate(ctx context.Context, nodeID string, version swarm.Version, node swarm.NodeSpec) error {
	ret := _m.Called(ctx, nodeID, version, node)

	if len(ret) == 0 {
		panic("no return value specified for NodeUpdate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, swarm.Version, swarm.NodeSpec) error); ok {
		r0 = rf(ctx, nodeID, version, node)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAPIClient_NodeUpdate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'NodeUpdate'
type MockAPIClient_NodeUpdate_Call struct {
	*mock.Call
}

// NodeUpdate is a helper method to define mock.On call
//   - ctx context.Context
//   - nodeID string
//   - version swarm.Version
//   - node swarm.NodeSpec
func (_e *MockAPIClient_Expecter) NodeUpdate(ctx interface{}, nodeID interface{}, version interface{}, node interface{}) *MockAPIClient_NodeUpdate_Call {
	return &MockAPIClient_NodeUpdate_Call{Call: _e.mock.On("NodeUpdate", ctx, nodeID, version, node)}
}

func (_c *MockAPIClient_NodeUpdate_Call) Run(run func(ctx context.Context, nodeID string, version swarm.Version, node swarm.NodeSpec)) *MockAPIClient_NodeUpdate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(swarm.Version), args[3].(swarm.NodeSpec))
	})
	return _c
}

func (_c *MockAPIClient_NodeUpdate_Call) Return(_a0 error) *MockAPIClient_NodeUpdate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAPIClient_NodeUpdate_Call) RunAndReturn(run func(context.Context, string, swarm.Version, swarm.NodeSpec) error) *MockAPIClient_NodeUpdate_Call {
	_c.Call.Return(run)
	return _c
}

// Ping provides a mock function with given fields: ctx
func (_m *MockAPIClient) Ping(ctx context.Context) (types.Ping, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for Ping")
	}

	var r0 types.Ping
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (types.Ping, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) types.Ping); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(types.Ping)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAPIClient_Ping_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Ping'
type MockAPIClient_Ping_Call struct {
	*mock.Call
}

// Ping is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockAPIClient_Expecter) Ping(ctx interface{}) *MockAPIClient_Ping_Call {
	return &MockAPIClient_Ping_Call{Call: _e.mock.On("Ping", ctx)}
}

func (_c *MockAPIClient_Ping_Call) Run(run func(ctx context.Context)) *MockAPIClient_Ping_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockAPIClient_Ping_Call) Return(_a0 types.Ping, _a1 error) *MockAPIClient_Ping_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAPIClient_Ping_Call) RunAndReturn(run func(context.Context) (types.Ping, error)) *MockAPIClient_Ping_Call {
	_c.Call.Return(run)
	return _c
}

// PluginCreate provides a mock function with given fields: ctx, createContext, options
func (_m *MockAPIClient) PluginCreate(ctx context.Context, createContext io.Reader, options types.PluginCreateOptions) error {
	ret := _m.Called(ctx, createContext, options)

	if len(ret) == 0 {
		panic("no return value specified for PluginCreate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, io.Reader, types.PluginCreateOptions) error); ok {
		r0 = rf(ctx, createContext, options)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAPIClient_PluginCreate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PluginCreate'
type MockAPIClient_PluginCreate_Call struct {
	*mock.Call
}

// PluginCreate is a helper method to define mock.On call
//   - ctx context.Context
//   - createContext io.Reader
//   - options types.PluginCreateOptions
func (_e *MockAPIClient_Expecter) PluginCreate(ctx interface{}, createContext interface{}, options interface{}) *MockAPIClient_PluginCreate_Call {
	return &MockAPIClient_PluginCreate_Call{Call: _e.mock.On("PluginCreate", ctx, createContext, options)}
}

func (_c *MockAPIClient_PluginCreate_Call) Run(run func(ctx context.Context, createContext io.Reader, options types.PluginCreateOptions)) *MockAPIClient_PluginCreate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(io.Reader), args[2].(types.PluginCreateOptions))
	})
	return _c
}

func (_c *MockAPIClient_PluginCreate_Call) Return(_a0 error) *MockAPIClient_PluginCreate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAPIClient_PluginCreate_Call) RunAndReturn(run func(context.Context, io.Reader, types.PluginCreateOptions) error) *MockAPIClient_PluginCreate_Call {
	_c.Call.Return(run)
	return _c
}

// PluginDisable provides a mock function with given fields: ctx, name, options
func (_m *MockAPIClient) PluginDisable(ctx context.Context, name string, options types.PluginDisableOptions) error {
	ret := _m.Called(ctx, name, options)

	if len(ret) == 0 {
		panic("no return value specified for PluginDisable")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, types.PluginDisableOptions) error); ok {
		r0 = rf(ctx, name, options)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAPIClient_PluginDisable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PluginDisable'
type MockAPIClient_PluginDisable_Call struct {
	*mock.Call
}

// PluginDisable is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - options types.PluginDisableOptions
func (_e *MockAPIClient_Expecter) PluginDisable(ctx interface{}, name interface{}, options interface{}) *MockAPIClient_PluginDisable_Call {
	return &MockAPIClient_PluginDisable_Call{Call: _e.mock.On("PluginDisable", ctx, name, options)}
}

func (_c *MockAPIClient_PluginDisable_Call) Run(run func(ctx context.Context, name string, options types.PluginDisableOptions)) *MockAPIClient_PluginDisable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(types.PluginDisableOptions))
	})
	return _c
}

func (_c *MockAPIClient_PluginDisable_Call) Return(_a0 error) *MockAPIClient_PluginDisable_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAPIClient_PluginDisable_Call) RunAndReturn(run func(context.Context, string, types.PluginDisableOptions) error) *MockAPIClient_PluginDisable_Call {
	_c.Call.Return(run)
	return _c
}

// PluginEnable provides a mock function with given fields: ctx, name, options
func (_m *MockAPIClient) PluginEnable(ctx context.Context, name string, options types.PluginEnableOptions) error {
	ret := _m.Called(ctx, name, options)

	if len(ret) == 0 {
		panic("no return value specified for PluginEnable")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, types.PluginEnableOptions) error); ok {
		r0 = rf(ctx, name, options)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAPIClient_PluginEnable_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PluginEnable'
type MockAPIClient_PluginEnable_Call struct {
	*mock.Call
}

// PluginEnable is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - options types.PluginEnableOptions
func (_e *MockAPIClient_Expecter) PluginEnable(ctx interface{}, name interface{}, options interface{}) *MockAPIClient_PluginEnable_Call {
	return &MockAPIClient_PluginEnable_Call{Call: _e.mock.On("PluginEnable", ctx, name, options)}
}

func (_c *MockAPIClient_PluginEnable_Call) Run(run func(ctx context.Context, name string, options types.PluginEnableOptions)) *MockAPIClient_PluginEnable_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(types.PluginEnableOptions))
	})
	return _c
}

func (_c *MockAPIClient_PluginEnable_Call) Return(_a0 error) *MockAPIClient_PluginEnable_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAPIClient_PluginEnable_Call) RunAndReturn(run func(context.Context, string, types.PluginEnableOptions) error) *MockAPIClient_PluginEnable_Call {
	_c.Call.Return(run)
	return _c
}

// PluginInspectWithRaw provides a mock function with given fields: ctx, name
func (_m *MockAPIClient) PluginInspectWithRaw(ctx context.Context, name string) (*types.Plugin, []byte, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for PluginInspectWithRaw")
	}

	var r0 *types.Plugin
	var r1 []byte
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (*types.Plugin, []byte, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) *types.Plugin); ok {
		r0 = rf(ctx, name)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*types.Plugin)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) []byte); ok {
		r1 = rf(ctx, name)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]byte)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(ctx, name)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockAPIClient_PluginInspectWithRaw_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PluginInspectWithRaw'
type MockAPIClient_PluginInspectWithRaw_Call struct {
	*mock.Call
}

// PluginInspectWithRaw is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockAPIClient_Expecter) PluginInspectWithRaw(ctx interface{}, name interface{}) *MockAPIClient_PluginInspectWithRaw_Call {
	return &MockAPIClient_PluginInspectWithRaw_Call{Call: _e.mock.On("PluginInspectWithRaw", ctx, name)}
}

func (_c *MockAPIClient_PluginInspectWithRaw_Call) Run(run func(ctx context.Context, name string)) *MockAPIClient_PluginInspectWithRaw_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockAPIClient_PluginInspectWithRaw_Call) Return(_a0 *types.Plugin, _a1 []byte, _a2 error) *MockAPIClient_PluginInspectWithRaw_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockAPIClient_PluginInspectWithRaw_Call) RunAndReturn(run func(context.Context, string) (*types.Plugin, []byte, error)) *MockAPIClient_PluginInspectWithRaw_Call {
	_c.Call.Return(run)
	return _c
}

// PluginInstall provides a mock function with given fields: ctx, name, options
func (_m *MockAPIClient) PluginInstall(ctx context.Context, name string, options types.PluginInstallOptions) (io.ReadCloser, error) {
	ret := _m.Called(ctx, name, options)

	if len(ret) == 0 {
		panic("no return value specified for PluginInstall")
	}

	var r0 io.ReadCloser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, types.PluginInstallOptions) (io.ReadCloser, error)); ok {
		return rf(ctx, name, options)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, types.PluginInstallOptions) io.ReadCloser); ok {
		r0 = rf(ctx, name, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, types.PluginInstallOptions) error); ok {
		r1 = rf(ctx, name, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAPIClient_PluginInstall_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PluginInstall'
type MockAPIClient_PluginInstall_Call struct {
	*mock.Call
}

// PluginInstall is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - options types.PluginInstallOptions
func (_e *MockAPIClient_Expecter) PluginInstall(ctx interface{}, name interface{}, options interface{}) *MockAPIClient_PluginInstall_Call {
	return &MockAPIClient_PluginInstall_Call{Call: _e.mock.On("PluginInstall", ctx, name, options)}
}

func (_c *MockAPIClient_PluginInstall_Call) Run(run func(ctx context.Context, name string, options types.PluginInstallOptions)) *MockAPIClient_PluginInstall_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(types.PluginInstallOptions))
	})
	return _c
}

func (_c *MockAPIClient_PluginInstall_Call) Return(_a0 io.ReadCloser, _a1 error) *MockAPIClient_PluginInstall_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAPIClient_PluginInstall_Call) RunAndReturn(run func(context.Context, string, types.PluginInstallOptions) (io.ReadCloser, error)) *MockAPIClient_PluginInstall_Call {
	_c.Call.Return(run)
	return _c
}

// PluginList provides a mock function with given fields: ctx, filter
func (_m *MockAPIClient) PluginList(ctx context.Context, filter filters.Args) (types.PluginsListResponse, error) {
	ret := _m.Called(ctx, filter)

	if len(ret) == 0 {
		panic("no return value specified for PluginList")
	}

	var r0 types.PluginsListResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, filters.Args) (types.PluginsListResponse, error)); ok {
		return rf(ctx, filter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, filters.Args) types.PluginsListResponse); ok {
		r0 = rf(ctx, filter)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(types.PluginsListResponse)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, filters.Args) error); ok {
		r1 = rf(ctx, filter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAPIClient_PluginList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PluginList'
type MockAPIClient_PluginList_Call struct {
	*mock.Call
}

// PluginList is a helper method to define mock.On call
//   - ctx context.Context
//   - filter filters.Args
func (_e *MockAPIClient_Expecter) PluginList(ctx interface{}, filter interface{}) *MockAPIClient_PluginList_Call {
	return &MockAPIClient_PluginList_Call{Call: _e.mock.On("PluginList", ctx, filter)}
}

func (_c *MockAPIClient_PluginList_Call) Run(run func(ctx context.Context, filter filters.Args)) *MockAPIClient_PluginList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(filters.Args))
	})
	return _c
}

func (_c *MockAPIClient_PluginList_Call) Return(_a0 types.PluginsListResponse, _a1 error) *MockAPIClient_PluginList_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAPIClient_PluginList_Call) RunAndReturn(run func(context.Context, filters.Args) (types.PluginsListResponse, error)) *MockAPIClient_PluginList_Call {
	_c.Call.Return(run)
	return _c
}

// PluginPush provides a mock function with given fields: ctx, name, registryAuth
func (_m *MockAPIClient) PluginPush(ctx context.Context, name string, registryAuth string) (io.ReadCloser, error) {
	ret := _m.Called(ctx, name, registryAuth)

	if len(ret) == 0 {
		panic("no return value specified for PluginPush")
	}

	var r0 io.ReadCloser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, string) (io.ReadCloser, error)); ok {
		return rf(ctx, name, registryAuth)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, string) io.ReadCloser); ok {
		r0 = rf(ctx, name, registryAuth)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, string) error); ok {
		r1 = rf(ctx, name, registryAuth)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAPIClient_PluginPush_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PluginPush'
type MockAPIClient_PluginPush_Call struct {
	*mock.Call
}

// PluginPush is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - registryAuth string
func (_e *MockAPIClient_Expecter) PluginPush(ctx interface{}, name interface{}, registryAuth interface{}) *MockAPIClient_PluginPush_Call {
	return &MockAPIClient_PluginPush_Call{Call: _e.mock.On("PluginPush", ctx, name, registryAuth)}
}

func (_c *MockAPIClient_PluginPush_Call) Run(run func(ctx context.Context, name string, registryAuth string)) *MockAPIClient_PluginPush_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(string))
	})
	return _c
}

func (_c *MockAPIClient_PluginPush_Call) Return(_a0 io.ReadCloser, _a1 error) *MockAPIClient_PluginPush_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAPIClient_PluginPush_Call) RunAndReturn(run func(context.Context, string, string) (io.ReadCloser, error)) *MockAPIClient_PluginPush_Call {
	_c.Call.Return(run)
	return _c
}

// PluginRemove provides a mock function with given fields: ctx, name, options
func (_m *MockAPIClient) PluginRemove(ctx context.Context, name string, options types.PluginRemoveOptions) error {
	ret := _m.Called(ctx, name, options)

	if len(ret) == 0 {
		panic("no return value specified for PluginRemove")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, types.PluginRemoveOptions) error); ok {
		r0 = rf(ctx, name, options)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAPIClient_PluginRemove_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PluginRemove'
type MockAPIClient_PluginRemove_Call struct {
	*mock.Call
}

// PluginRemove is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - options types.PluginRemoveOptions
func (_e *MockAPIClient_Expecter) PluginRemove(ctx interface{}, name interface{}, options interface{}) *MockAPIClient_PluginRemove_Call {
	return &MockAPIClient_PluginRemove_Call{Call: _e.mock.On("PluginRemove", ctx, name, options)}
}

func (_c *MockAPIClient_PluginRemove_Call) Run(run func(ctx context.Context, name string, options types.PluginRemoveOptions)) *MockAPIClient_PluginRemove_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(types.PluginRemoveOptions))
	})
	return _c
}

func (_c *MockAPIClient_PluginRemove_Call) Return(_a0 error) *MockAPIClient_PluginRemove_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAPIClient_PluginRemove_Call) RunAndReturn(run func(context.Context, string, types.PluginRemoveOptions) error) *MockAPIClient_PluginRemove_Call {
	_c.Call.Return(run)
	return _c
}

// PluginSet provides a mock function with given fields: ctx, name, args
func (_m *MockAPIClient) PluginSet(ctx context.Context, name string, args []string) error {
	ret := _m.Called(ctx, name, args)

	if len(ret) == 0 {
		panic("no return value specified for PluginSet")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, []string) error); ok {
		r0 = rf(ctx, name, args)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAPIClient_PluginSet_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PluginSet'
type MockAPIClient_PluginSet_Call struct {
	*mock.Call
}

// PluginSet is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - args []string
func (_e *MockAPIClient_Expecter) PluginSet(ctx interface{}, name interface{}, args interface{}) *MockAPIClient_PluginSet_Call {
	return &MockAPIClient_PluginSet_Call{Call: _e.mock.On("PluginSet", ctx, name, args)}
}

func (_c *MockAPIClient_PluginSet_Call) Run(run func(ctx context.Context, name string, args []string)) *MockAPIClient_PluginSet_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].([]string))
	})
	return _c
}

func (_c *MockAPIClient_PluginSet_Call) Return(_a0 error) *MockAPIClient_PluginSet_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAPIClient_PluginSet_Call) RunAndReturn(run func(context.Context, string, []string) error) *MockAPIClient_PluginSet_Call {
	_c.Call.Return(run)
	return _c
}

// PluginUpgrade provides a mock function with given fields: ctx, name, options
func (_m *MockAPIClient) PluginUpgrade(ctx context.Context, name string, options types.PluginInstallOptions) (io.ReadCloser, error) {
	ret := _m.Called(ctx, name, options)

	if len(ret) == 0 {
		panic("no return value specified for PluginUpgrade")
	}

	var r0 io.ReadCloser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, types.PluginInstallOptions) (io.ReadCloser, error)); ok {
		return rf(ctx, name, options)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, types.PluginInstallOptions) io.ReadCloser); ok {
		r0 = rf(ctx, name, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, types.PluginInstallOptions) error); ok {
		r1 = rf(ctx, name, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAPIClient_PluginUpgrade_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'PluginUpgrade'
type MockAPIClient_PluginUpgrade_Call struct {
	*mock.Call
}

// PluginUpgrade is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
//   - options types.PluginInstallOptions
func (_e *MockAPIClient_Expecter) PluginUpgrade(ctx interface{}, name interface{}, options interface{}) *MockAPIClient_PluginUpgrade_Call {
	return &MockAPIClient_PluginUpgrade_Call{Call: _e.mock.On("PluginUpgrade", ctx, name, options)}
}

func (_c *MockAPIClient_PluginUpgrade_Call) Run(run func(ctx context.Context, name string, options types.PluginInstallOptions)) *MockAPIClient_PluginUpgrade_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(types.PluginInstallOptions))
	})
	return _c
}

func (_c *MockAPIClient_PluginUpgrade_Call) Return(_a0 io.ReadCloser, _a1 error) *MockAPIClient_PluginUpgrade_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAPIClient_PluginUpgrade_Call) RunAndReturn(run func(context.Context, string, types.PluginInstallOptions) (io.ReadCloser, error)) *MockAPIClient_PluginUpgrade_Call {
	_c.Call.Return(run)
	return _c
}

// RegistryLogin provides a mock function with given fields: ctx, auth
func (_m *MockAPIClient) RegistryLogin(ctx context.Context, auth registry.AuthConfig) (registry.AuthenticateOKBody, error) {
	ret := _m.Called(ctx, auth)

	if len(ret) == 0 {
		panic("no return value specified for RegistryLogin")
	}

	var r0 registry.AuthenticateOKBody
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, registry.AuthConfig) (registry.AuthenticateOKBody, error)); ok {
		return rf(ctx, auth)
	}
	if rf, ok := ret.Get(0).(func(context.Context, registry.AuthConfig) registry.AuthenticateOKBody); ok {
		r0 = rf(ctx, auth)
	} else {
		r0 = ret.Get(0).(registry.AuthenticateOKBody)
	}

	if rf, ok := ret.Get(1).(func(context.Context, registry.AuthConfig) error); ok {
		r1 = rf(ctx, auth)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAPIClient_RegistryLogin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'RegistryLogin'
type MockAPIClient_RegistryLogin_Call struct {
	*mock.Call
}

// RegistryLogin is a helper method to define mock.On call
//   - ctx context.Context
//   - auth registry.AuthConfig
func (_e *MockAPIClient_Expecter) RegistryLogin(ctx interface{}, auth interface{}) *MockAPIClient_RegistryLogin_Call {
	return &MockAPIClient_RegistryLogin_Call{Call: _e.mock.On("RegistryLogin", ctx, auth)}
}

func (_c *MockAPIClient_RegistryLogin_Call) Run(run func(ctx context.Context, auth registry.AuthConfig)) *MockAPIClient_RegistryLogin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(registry.AuthConfig))
	})
	return _c
}

func (_c *MockAPIClient_RegistryLogin_Call) Return(_a0 registry.AuthenticateOKBody, _a1 error) *MockAPIClient_RegistryLogin_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAPIClient_RegistryLogin_Call) RunAndReturn(run func(context.Context, registry.AuthConfig) (registry.AuthenticateOKBody, error)) *MockAPIClient_RegistryLogin_Call {
	_c.Call.Return(run)
	return _c
}

// SecretCreate provides a mock function with given fields: ctx, secret
func (_m *MockAPIClient) SecretCreate(ctx context.Context, secret swarm.SecretSpec) (types.SecretCreateResponse, error) {
	ret := _m.Called(ctx, secret)

	if len(ret) == 0 {
		panic("no return value specified for SecretCreate")
	}

	var r0 types.SecretCreateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, swarm.SecretSpec) (types.SecretCreateResponse, error)); ok {
		return rf(ctx, secret)
	}
	if rf, ok := ret.Get(0).(func(context.Context, swarm.SecretSpec) types.SecretCreateResponse); ok {
		r0 = rf(ctx, secret)
	} else {
		r0 = ret.Get(0).(types.SecretCreateResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, swarm.SecretSpec) error); ok {
		r1 = rf(ctx, secret)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAPIClient_SecretCreate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SecretCreate'
type MockAPIClient_SecretCreate_Call struct {
	*mock.Call
}

// SecretCreate is a helper method to define mock.On call
//   - ctx context.Context
//   - secret swarm.SecretSpec
func (_e *MockAPIClient_Expecter) SecretCreate(ctx interface{}, secret interface{}) *MockAPIClient_SecretCreate_Call {
	return &MockAPIClient_SecretCreate_Call{Call: _e.mock.On("SecretCreate", ctx, secret)}
}

func (_c *MockAPIClient_SecretCreate_Call) Run(run func(ctx context.Context, secret swarm.SecretSpec)) *MockAPIClient_SecretCreate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(swarm.SecretSpec))
	})
	return _c
}

func (_c *MockAPIClient_SecretCreate_Call) Return(_a0 types.SecretCreateResponse, _a1 error) *MockAPIClient_SecretCreate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAPIClient_SecretCreate_Call) RunAndReturn(run func(context.Context, swarm.SecretSpec) (types.SecretCreateResponse, error)) *MockAPIClient_SecretCreate_Call {
	_c.Call.Return(run)
	return _c
}

// SecretInspectWithRaw provides a mock function with given fields: ctx, name
func (_m *MockAPIClient) SecretInspectWithRaw(ctx context.Context, name string) (swarm.Secret, []byte, error) {
	ret := _m.Called(ctx, name)

	if len(ret) == 0 {
		panic("no return value specified for SecretInspectWithRaw")
	}

	var r0 swarm.Secret
	var r1 []byte
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (swarm.Secret, []byte, error)); ok {
		return rf(ctx, name)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) swarm.Secret); ok {
		r0 = rf(ctx, name)
	} else {
		r0 = ret.Get(0).(swarm.Secret)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) []byte); ok {
		r1 = rf(ctx, name)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]byte)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(ctx, name)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockAPIClient_SecretInspectWithRaw_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SecretInspectWithRaw'
type MockAPIClient_SecretInspectWithRaw_Call struct {
	*mock.Call
}

// SecretInspectWithRaw is a helper method to define mock.On call
//   - ctx context.Context
//   - name string
func (_e *MockAPIClient_Expecter) SecretInspectWithRaw(ctx interface{}, name interface{}) *MockAPIClient_SecretInspectWithRaw_Call {
	return &MockAPIClient_SecretInspectWithRaw_Call{Call: _e.mock.On("SecretInspectWithRaw", ctx, name)}
}

func (_c *MockAPIClient_SecretInspectWithRaw_Call) Run(run func(ctx context.Context, name string)) *MockAPIClient_SecretInspectWithRaw_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockAPIClient_SecretInspectWithRaw_Call) Return(_a0 swarm.Secret, _a1 []byte, _a2 error) *MockAPIClient_SecretInspectWithRaw_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockAPIClient_SecretInspectWithRaw_Call) RunAndReturn(run func(context.Context, string) (swarm.Secret, []byte, error)) *MockAPIClient_SecretInspectWithRaw_Call {
	_c.Call.Return(run)
	return _c
}

// SecretList provides a mock function with given fields: ctx, options
func (_m *MockAPIClient) SecretList(ctx context.Context, options types.SecretListOptions) ([]swarm.Secret, error) {
	ret := _m.Called(ctx, options)

	if len(ret) == 0 {
		panic("no return value specified for SecretList")
	}

	var r0 []swarm.Secret
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, types.SecretListOptions) ([]swarm.Secret, error)); ok {
		return rf(ctx, options)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.SecretListOptions) []swarm.Secret); ok {
		r0 = rf(ctx, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]swarm.Secret)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.SecretListOptions) error); ok {
		r1 = rf(ctx, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAPIClient_SecretList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SecretList'
type MockAPIClient_SecretList_Call struct {
	*mock.Call
}

// SecretList is a helper method to define mock.On call
//   - ctx context.Context
//   - options types.SecretListOptions
func (_e *MockAPIClient_Expecter) SecretList(ctx interface{}, options interface{}) *MockAPIClient_SecretList_Call {
	return &MockAPIClient_SecretList_Call{Call: _e.mock.On("SecretList", ctx, options)}
}

func (_c *MockAPIClient_SecretList_Call) Run(run func(ctx context.Context, options types.SecretListOptions)) *MockAPIClient_SecretList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.SecretListOptions))
	})
	return _c
}

func (_c *MockAPIClient_SecretList_Call) Return(_a0 []swarm.Secret, _a1 error) *MockAPIClient_SecretList_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAPIClient_SecretList_Call) RunAndReturn(run func(context.Context, types.SecretListOptions) ([]swarm.Secret, error)) *MockAPIClient_SecretList_Call {
	_c.Call.Return(run)
	return _c
}

// SecretRemove provides a mock function with given fields: ctx, id
func (_m *MockAPIClient) SecretRemove(ctx context.Context, id string) error {
	ret := _m.Called(ctx, id)

	if len(ret) == 0 {
		panic("no return value specified for SecretRemove")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, id)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAPIClient_SecretRemove_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SecretRemove'
type MockAPIClient_SecretRemove_Call struct {
	*mock.Call
}

// SecretRemove is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
func (_e *MockAPIClient_Expecter) SecretRemove(ctx interface{}, id interface{}) *MockAPIClient_SecretRemove_Call {
	return &MockAPIClient_SecretRemove_Call{Call: _e.mock.On("SecretRemove", ctx, id)}
}

func (_c *MockAPIClient_SecretRemove_Call) Run(run func(ctx context.Context, id string)) *MockAPIClient_SecretRemove_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockAPIClient_SecretRemove_Call) Return(_a0 error) *MockAPIClient_SecretRemove_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAPIClient_SecretRemove_Call) RunAndReturn(run func(context.Context, string) error) *MockAPIClient_SecretRemove_Call {
	_c.Call.Return(run)
	return _c
}

// SecretUpdate provides a mock function with given fields: ctx, id, version, secret
func (_m *MockAPIClient) SecretUpdate(ctx context.Context, id string, version swarm.Version, secret swarm.SecretSpec) error {
	ret := _m.Called(ctx, id, version, secret)

	if len(ret) == 0 {
		panic("no return value specified for SecretUpdate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, swarm.Version, swarm.SecretSpec) error); ok {
		r0 = rf(ctx, id, version, secret)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAPIClient_SecretUpdate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SecretUpdate'
type MockAPIClient_SecretUpdate_Call struct {
	*mock.Call
}

// SecretUpdate is a helper method to define mock.On call
//   - ctx context.Context
//   - id string
//   - version swarm.Version
//   - secret swarm.SecretSpec
func (_e *MockAPIClient_Expecter) SecretUpdate(ctx interface{}, id interface{}, version interface{}, secret interface{}) *MockAPIClient_SecretUpdate_Call {
	return &MockAPIClient_SecretUpdate_Call{Call: _e.mock.On("SecretUpdate", ctx, id, version, secret)}
}

func (_c *MockAPIClient_SecretUpdate_Call) Run(run func(ctx context.Context, id string, version swarm.Version, secret swarm.SecretSpec)) *MockAPIClient_SecretUpdate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(swarm.Version), args[3].(swarm.SecretSpec))
	})
	return _c
}

func (_c *MockAPIClient_SecretUpdate_Call) Return(_a0 error) *MockAPIClient_SecretUpdate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAPIClient_SecretUpdate_Call) RunAndReturn(run func(context.Context, string, swarm.Version, swarm.SecretSpec) error) *MockAPIClient_SecretUpdate_Call {
	_c.Call.Return(run)
	return _c
}

// ServerVersion provides a mock function with given fields: ctx
func (_m *MockAPIClient) ServerVersion(ctx context.Context) (types.Version, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for ServerVersion")
	}

	var r0 types.Version
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (types.Version, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) types.Version); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(types.Version)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAPIClient_ServerVersion_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ServerVersion'
type MockAPIClient_ServerVersion_Call struct {
	*mock.Call
}

// ServerVersion is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockAPIClient_Expecter) ServerVersion(ctx interface{}) *MockAPIClient_ServerVersion_Call {
	return &MockAPIClient_ServerVersion_Call{Call: _e.mock.On("ServerVersion", ctx)}
}

func (_c *MockAPIClient_ServerVersion_Call) Run(run func(ctx context.Context)) *MockAPIClient_ServerVersion_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockAPIClient_ServerVersion_Call) Return(_a0 types.Version, _a1 error) *MockAPIClient_ServerVersion_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAPIClient_ServerVersion_Call) RunAndReturn(run func(context.Context) (types.Version, error)) *MockAPIClient_ServerVersion_Call {
	_c.Call.Return(run)
	return _c
}

// ServiceCreate provides a mock function with given fields: ctx, service, options
func (_m *MockAPIClient) ServiceCreate(ctx context.Context, service swarm.ServiceSpec, options types.ServiceCreateOptions) (swarm.ServiceCreateResponse, error) {
	ret := _m.Called(ctx, service, options)

	if len(ret) == 0 {
		panic("no return value specified for ServiceCreate")
	}

	var r0 swarm.ServiceCreateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, swarm.ServiceSpec, types.ServiceCreateOptions) (swarm.ServiceCreateResponse, error)); ok {
		return rf(ctx, service, options)
	}
	if rf, ok := ret.Get(0).(func(context.Context, swarm.ServiceSpec, types.ServiceCreateOptions) swarm.ServiceCreateResponse); ok {
		r0 = rf(ctx, service, options)
	} else {
		r0 = ret.Get(0).(swarm.ServiceCreateResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, swarm.ServiceSpec, types.ServiceCreateOptions) error); ok {
		r1 = rf(ctx, service, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAPIClient_ServiceCreate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ServiceCreate'
type MockAPIClient_ServiceCreate_Call struct {
	*mock.Call
}

// ServiceCreate is a helper method to define mock.On call
//   - ctx context.Context
//   - service swarm.ServiceSpec
//   - options types.ServiceCreateOptions
func (_e *MockAPIClient_Expecter) ServiceCreate(ctx interface{}, service interface{}, options interface{}) *MockAPIClient_ServiceCreate_Call {
	return &MockAPIClient_ServiceCreate_Call{Call: _e.mock.On("ServiceCreate", ctx, service, options)}
}

func (_c *MockAPIClient_ServiceCreate_Call) Run(run func(ctx context.Context, service swarm.ServiceSpec, options types.ServiceCreateOptions)) *MockAPIClient_ServiceCreate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(swarm.ServiceSpec), args[2].(types.ServiceCreateOptions))
	})
	return _c
}

func (_c *MockAPIClient_ServiceCreate_Call) Return(_a0 swarm.ServiceCreateResponse, _a1 error) *MockAPIClient_ServiceCreate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAPIClient_ServiceCreate_Call) RunAndReturn(run func(context.Context, swarm.ServiceSpec, types.ServiceCreateOptions) (swarm.ServiceCreateResponse, error)) *MockAPIClient_ServiceCreate_Call {
	_c.Call.Return(run)
	return _c
}

// ServiceInspectWithRaw provides a mock function with given fields: ctx, serviceID, options
func (_m *MockAPIClient) ServiceInspectWithRaw(ctx context.Context, serviceID string, options types.ServiceInspectOptions) (swarm.Service, []byte, error) {
	ret := _m.Called(ctx, serviceID, options)

	if len(ret) == 0 {
		panic("no return value specified for ServiceInspectWithRaw")
	}

	var r0 swarm.Service
	var r1 []byte
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string, types.ServiceInspectOptions) (swarm.Service, []byte, error)); ok {
		return rf(ctx, serviceID, options)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, types.ServiceInspectOptions) swarm.Service); ok {
		r0 = rf(ctx, serviceID, options)
	} else {
		r0 = ret.Get(0).(swarm.Service)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, types.ServiceInspectOptions) []byte); ok {
		r1 = rf(ctx, serviceID, options)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]byte)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string, types.ServiceInspectOptions) error); ok {
		r2 = rf(ctx, serviceID, options)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockAPIClient_ServiceInspectWithRaw_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ServiceInspectWithRaw'
type MockAPIClient_ServiceInspectWithRaw_Call struct {
	*mock.Call
}

// ServiceInspectWithRaw is a helper method to define mock.On call
//   - ctx context.Context
//   - serviceID string
//   - options types.ServiceInspectOptions
func (_e *MockAPIClient_Expecter) ServiceInspectWithRaw(ctx interface{}, serviceID interface{}, options interface{}) *MockAPIClient_ServiceInspectWithRaw_Call {
	return &MockAPIClient_ServiceInspectWithRaw_Call{Call: _e.mock.On("ServiceInspectWithRaw", ctx, serviceID, options)}
}

func (_c *MockAPIClient_ServiceInspectWithRaw_Call) Run(run func(ctx context.Context, serviceID string, options types.ServiceInspectOptions)) *MockAPIClient_ServiceInspectWithRaw_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(types.ServiceInspectOptions))
	})
	return _c
}

func (_c *MockAPIClient_ServiceInspectWithRaw_Call) Return(_a0 swarm.Service, _a1 []byte, _a2 error) *MockAPIClient_ServiceInspectWithRaw_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockAPIClient_ServiceInspectWithRaw_Call) RunAndReturn(run func(context.Context, string, types.ServiceInspectOptions) (swarm.Service, []byte, error)) *MockAPIClient_ServiceInspectWithRaw_Call {
	_c.Call.Return(run)
	return _c
}

// ServiceList provides a mock function with given fields: ctx, options
func (_m *MockAPIClient) ServiceList(ctx context.Context, options types.ServiceListOptions) ([]swarm.Service, error) {
	ret := _m.Called(ctx, options)

	if len(ret) == 0 {
		panic("no return value specified for ServiceList")
	}

	var r0 []swarm.Service
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, types.ServiceListOptions) ([]swarm.Service, error)); ok {
		return rf(ctx, options)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.ServiceListOptions) []swarm.Service); ok {
		r0 = rf(ctx, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]swarm.Service)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.ServiceListOptions) error); ok {
		r1 = rf(ctx, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAPIClient_ServiceList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ServiceList'
type MockAPIClient_ServiceList_Call struct {
	*mock.Call
}

// ServiceList is a helper method to define mock.On call
//   - ctx context.Context
//   - options types.ServiceListOptions
func (_e *MockAPIClient_Expecter) ServiceList(ctx interface{}, options interface{}) *MockAPIClient_ServiceList_Call {
	return &MockAPIClient_ServiceList_Call{Call: _e.mock.On("ServiceList", ctx, options)}
}

func (_c *MockAPIClient_ServiceList_Call) Run(run func(ctx context.Context, options types.ServiceListOptions)) *MockAPIClient_ServiceList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.ServiceListOptions))
	})
	return _c
}

func (_c *MockAPIClient_ServiceList_Call) Return(_a0 []swarm.Service, _a1 error) *MockAPIClient_ServiceList_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAPIClient_ServiceList_Call) RunAndReturn(run func(context.Context, types.ServiceListOptions) ([]swarm.Service, error)) *MockAPIClient_ServiceList_Call {
	_c.Call.Return(run)
	return _c
}

// ServiceLogs provides a mock function with given fields: ctx, serviceID, options
func (_m *MockAPIClient) ServiceLogs(ctx context.Context, serviceID string, options container.LogsOptions) (io.ReadCloser, error) {
	ret := _m.Called(ctx, serviceID, options)

	if len(ret) == 0 {
		panic("no return value specified for ServiceLogs")
	}

	var r0 io.ReadCloser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, container.LogsOptions) (io.ReadCloser, error)); ok {
		return rf(ctx, serviceID, options)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, container.LogsOptions) io.ReadCloser); ok {
		r0 = rf(ctx, serviceID, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, container.LogsOptions) error); ok {
		r1 = rf(ctx, serviceID, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAPIClient_ServiceLogs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ServiceLogs'
type MockAPIClient_ServiceLogs_Call struct {
	*mock.Call
}

// ServiceLogs is a helper method to define mock.On call
//   - ctx context.Context
//   - serviceID string
//   - options container.LogsOptions
func (_e *MockAPIClient_Expecter) ServiceLogs(ctx interface{}, serviceID interface{}, options interface{}) *MockAPIClient_ServiceLogs_Call {
	return &MockAPIClient_ServiceLogs_Call{Call: _e.mock.On("ServiceLogs", ctx, serviceID, options)}
}

func (_c *MockAPIClient_ServiceLogs_Call) Run(run func(ctx context.Context, serviceID string, options container.LogsOptions)) *MockAPIClient_ServiceLogs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(container.LogsOptions))
	})
	return _c
}

func (_c *MockAPIClient_ServiceLogs_Call) Return(_a0 io.ReadCloser, _a1 error) *MockAPIClient_ServiceLogs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAPIClient_ServiceLogs_Call) RunAndReturn(run func(context.Context, string, container.LogsOptions) (io.ReadCloser, error)) *MockAPIClient_ServiceLogs_Call {
	_c.Call.Return(run)
	return _c
}

// ServiceRemove provides a mock function with given fields: ctx, serviceID
func (_m *MockAPIClient) ServiceRemove(ctx context.Context, serviceID string) error {
	ret := _m.Called(ctx, serviceID)

	if len(ret) == 0 {
		panic("no return value specified for ServiceRemove")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string) error); ok {
		r0 = rf(ctx, serviceID)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAPIClient_ServiceRemove_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ServiceRemove'
type MockAPIClient_ServiceRemove_Call struct {
	*mock.Call
}

// ServiceRemove is a helper method to define mock.On call
//   - ctx context.Context
//   - serviceID string
func (_e *MockAPIClient_Expecter) ServiceRemove(ctx interface{}, serviceID interface{}) *MockAPIClient_ServiceRemove_Call {
	return &MockAPIClient_ServiceRemove_Call{Call: _e.mock.On("ServiceRemove", ctx, serviceID)}
}

func (_c *MockAPIClient_ServiceRemove_Call) Run(run func(ctx context.Context, serviceID string)) *MockAPIClient_ServiceRemove_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockAPIClient_ServiceRemove_Call) Return(_a0 error) *MockAPIClient_ServiceRemove_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAPIClient_ServiceRemove_Call) RunAndReturn(run func(context.Context, string) error) *MockAPIClient_ServiceRemove_Call {
	_c.Call.Return(run)
	return _c
}

// ServiceUpdate provides a mock function with given fields: ctx, serviceID, version, service, options
func (_m *MockAPIClient) ServiceUpdate(ctx context.Context, serviceID string, version swarm.Version, service swarm.ServiceSpec, options types.ServiceUpdateOptions) (swarm.ServiceUpdateResponse, error) {
	ret := _m.Called(ctx, serviceID, version, service, options)

	if len(ret) == 0 {
		panic("no return value specified for ServiceUpdate")
	}

	var r0 swarm.ServiceUpdateResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, swarm.Version, swarm.ServiceSpec, types.ServiceUpdateOptions) (swarm.ServiceUpdateResponse, error)); ok {
		return rf(ctx, serviceID, version, service, options)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, swarm.Version, swarm.ServiceSpec, types.ServiceUpdateOptions) swarm.ServiceUpdateResponse); ok {
		r0 = rf(ctx, serviceID, version, service, options)
	} else {
		r0 = ret.Get(0).(swarm.ServiceUpdateResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, swarm.Version, swarm.ServiceSpec, types.ServiceUpdateOptions) error); ok {
		r1 = rf(ctx, serviceID, version, service, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAPIClient_ServiceUpdate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ServiceUpdate'
type MockAPIClient_ServiceUpdate_Call struct {
	*mock.Call
}

// ServiceUpdate is a helper method to define mock.On call
//   - ctx context.Context
//   - serviceID string
//   - version swarm.Version
//   - service swarm.ServiceSpec
//   - options types.ServiceUpdateOptions
func (_e *MockAPIClient_Expecter) ServiceUpdate(ctx interface{}, serviceID interface{}, version interface{}, service interface{}, options interface{}) *MockAPIClient_ServiceUpdate_Call {
	return &MockAPIClient_ServiceUpdate_Call{Call: _e.mock.On("ServiceUpdate", ctx, serviceID, version, service, options)}
}

func (_c *MockAPIClient_ServiceUpdate_Call) Run(run func(ctx context.Context, serviceID string, version swarm.Version, service swarm.ServiceSpec, options types.ServiceUpdateOptions)) *MockAPIClient_ServiceUpdate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(swarm.Version), args[3].(swarm.ServiceSpec), args[4].(types.ServiceUpdateOptions))
	})
	return _c
}

func (_c *MockAPIClient_ServiceUpdate_Call) Return(_a0 swarm.ServiceUpdateResponse, _a1 error) *MockAPIClient_ServiceUpdate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAPIClient_ServiceUpdate_Call) RunAndReturn(run func(context.Context, string, swarm.Version, swarm.ServiceSpec, types.ServiceUpdateOptions) (swarm.ServiceUpdateResponse, error)) *MockAPIClient_ServiceUpdate_Call {
	_c.Call.Return(run)
	return _c
}

// SwarmGetUnlockKey provides a mock function with given fields: ctx
func (_m *MockAPIClient) SwarmGetUnlockKey(ctx context.Context) (types.SwarmUnlockKeyResponse, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for SwarmGetUnlockKey")
	}

	var r0 types.SwarmUnlockKeyResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (types.SwarmUnlockKeyResponse, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) types.SwarmUnlockKeyResponse); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(types.SwarmUnlockKeyResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAPIClient_SwarmGetUnlockKey_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SwarmGetUnlockKey'
type MockAPIClient_SwarmGetUnlockKey_Call struct {
	*mock.Call
}

// SwarmGetUnlockKey is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockAPIClient_Expecter) SwarmGetUnlockKey(ctx interface{}) *MockAPIClient_SwarmGetUnlockKey_Call {
	return &MockAPIClient_SwarmGetUnlockKey_Call{Call: _e.mock.On("SwarmGetUnlockKey", ctx)}
}

func (_c *MockAPIClient_SwarmGetUnlockKey_Call) Run(run func(ctx context.Context)) *MockAPIClient_SwarmGetUnlockKey_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockAPIClient_SwarmGetUnlockKey_Call) Return(_a0 types.SwarmUnlockKeyResponse, _a1 error) *MockAPIClient_SwarmGetUnlockKey_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAPIClient_SwarmGetUnlockKey_Call) RunAndReturn(run func(context.Context) (types.SwarmUnlockKeyResponse, error)) *MockAPIClient_SwarmGetUnlockKey_Call {
	_c.Call.Return(run)
	return _c
}

// SwarmInit provides a mock function with given fields: ctx, req
func (_m *MockAPIClient) SwarmInit(ctx context.Context, req swarm.InitRequest) (string, error) {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for SwarmInit")
	}

	var r0 string
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, swarm.InitRequest) (string, error)); ok {
		return rf(ctx, req)
	}
	if rf, ok := ret.Get(0).(func(context.Context, swarm.InitRequest) string); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Get(0).(string)
	}

	if rf, ok := ret.Get(1).(func(context.Context, swarm.InitRequest) error); ok {
		r1 = rf(ctx, req)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAPIClient_SwarmInit_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SwarmInit'
type MockAPIClient_SwarmInit_Call struct {
	*mock.Call
}

// SwarmInit is a helper method to define mock.On call
//   - ctx context.Context
//   - req swarm.InitRequest
func (_e *MockAPIClient_Expecter) SwarmInit(ctx interface{}, req interface{}) *MockAPIClient_SwarmInit_Call {
	return &MockAPIClient_SwarmInit_Call{Call: _e.mock.On("SwarmInit", ctx, req)}
}

func (_c *MockAPIClient_SwarmInit_Call) Run(run func(ctx context.Context, req swarm.InitRequest)) *MockAPIClient_SwarmInit_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(swarm.InitRequest))
	})
	return _c
}

func (_c *MockAPIClient_SwarmInit_Call) Return(_a0 string, _a1 error) *MockAPIClient_SwarmInit_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAPIClient_SwarmInit_Call) RunAndReturn(run func(context.Context, swarm.InitRequest) (string, error)) *MockAPIClient_SwarmInit_Call {
	_c.Call.Return(run)
	return _c
}

// SwarmInspect provides a mock function with given fields: ctx
func (_m *MockAPIClient) SwarmInspect(ctx context.Context) (swarm.Swarm, error) {
	ret := _m.Called(ctx)

	if len(ret) == 0 {
		panic("no return value specified for SwarmInspect")
	}

	var r0 swarm.Swarm
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context) (swarm.Swarm, error)); ok {
		return rf(ctx)
	}
	if rf, ok := ret.Get(0).(func(context.Context) swarm.Swarm); ok {
		r0 = rf(ctx)
	} else {
		r0 = ret.Get(0).(swarm.Swarm)
	}

	if rf, ok := ret.Get(1).(func(context.Context) error); ok {
		r1 = rf(ctx)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAPIClient_SwarmInspect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SwarmInspect'
type MockAPIClient_SwarmInspect_Call struct {
	*mock.Call
}

// SwarmInspect is a helper method to define mock.On call
//   - ctx context.Context
func (_e *MockAPIClient_Expecter) SwarmInspect(ctx interface{}) *MockAPIClient_SwarmInspect_Call {
	return &MockAPIClient_SwarmInspect_Call{Call: _e.mock.On("SwarmInspect", ctx)}
}

func (_c *MockAPIClient_SwarmInspect_Call) Run(run func(ctx context.Context)) *MockAPIClient_SwarmInspect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockAPIClient_SwarmInspect_Call) Return(_a0 swarm.Swarm, _a1 error) *MockAPIClient_SwarmInspect_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAPIClient_SwarmInspect_Call) RunAndReturn(run func(context.Context) (swarm.Swarm, error)) *MockAPIClient_SwarmInspect_Call {
	_c.Call.Return(run)
	return _c
}

// SwarmJoin provides a mock function with given fields: ctx, req
func (_m *MockAPIClient) SwarmJoin(ctx context.Context, req swarm.JoinRequest) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for SwarmJoin")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, swarm.JoinRequest) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAPIClient_SwarmJoin_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SwarmJoin'
type MockAPIClient_SwarmJoin_Call struct {
	*mock.Call
}

// SwarmJoin is a helper method to define mock.On call
//   - ctx context.Context
//   - req swarm.JoinRequest
func (_e *MockAPIClient_Expecter) SwarmJoin(ctx interface{}, req interface{}) *MockAPIClient_SwarmJoin_Call {
	return &MockAPIClient_SwarmJoin_Call{Call: _e.mock.On("SwarmJoin", ctx, req)}
}

func (_c *MockAPIClient_SwarmJoin_Call) Run(run func(ctx context.Context, req swarm.JoinRequest)) *MockAPIClient_SwarmJoin_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(swarm.JoinRequest))
	})
	return _c
}

func (_c *MockAPIClient_SwarmJoin_Call) Return(_a0 error) *MockAPIClient_SwarmJoin_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAPIClient_SwarmJoin_Call) RunAndReturn(run func(context.Context, swarm.JoinRequest) error) *MockAPIClient_SwarmJoin_Call {
	_c.Call.Return(run)
	return _c
}

// SwarmLeave provides a mock function with given fields: ctx, force
func (_m *MockAPIClient) SwarmLeave(ctx context.Context, force bool) error {
	ret := _m.Called(ctx, force)

	if len(ret) == 0 {
		panic("no return value specified for SwarmLeave")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, bool) error); ok {
		r0 = rf(ctx, force)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAPIClient_SwarmLeave_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SwarmLeave'
type MockAPIClient_SwarmLeave_Call struct {
	*mock.Call
}

// SwarmLeave is a helper method to define mock.On call
//   - ctx context.Context
//   - force bool
func (_e *MockAPIClient_Expecter) SwarmLeave(ctx interface{}, force interface{}) *MockAPIClient_SwarmLeave_Call {
	return &MockAPIClient_SwarmLeave_Call{Call: _e.mock.On("SwarmLeave", ctx, force)}
}

func (_c *MockAPIClient_SwarmLeave_Call) Run(run func(ctx context.Context, force bool)) *MockAPIClient_SwarmLeave_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(bool))
	})
	return _c
}

func (_c *MockAPIClient_SwarmLeave_Call) Return(_a0 error) *MockAPIClient_SwarmLeave_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAPIClient_SwarmLeave_Call) RunAndReturn(run func(context.Context, bool) error) *MockAPIClient_SwarmLeave_Call {
	_c.Call.Return(run)
	return _c
}

// SwarmUnlock provides a mock function with given fields: ctx, req
func (_m *MockAPIClient) SwarmUnlock(ctx context.Context, req swarm.UnlockRequest) error {
	ret := _m.Called(ctx, req)

	if len(ret) == 0 {
		panic("no return value specified for SwarmUnlock")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, swarm.UnlockRequest) error); ok {
		r0 = rf(ctx, req)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAPIClient_SwarmUnlock_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SwarmUnlock'
type MockAPIClient_SwarmUnlock_Call struct {
	*mock.Call
}

// SwarmUnlock is a helper method to define mock.On call
//   - ctx context.Context
//   - req swarm.UnlockRequest
func (_e *MockAPIClient_Expecter) SwarmUnlock(ctx interface{}, req interface{}) *MockAPIClient_SwarmUnlock_Call {
	return &MockAPIClient_SwarmUnlock_Call{Call: _e.mock.On("SwarmUnlock", ctx, req)}
}

func (_c *MockAPIClient_SwarmUnlock_Call) Run(run func(ctx context.Context, req swarm.UnlockRequest)) *MockAPIClient_SwarmUnlock_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(swarm.UnlockRequest))
	})
	return _c
}

func (_c *MockAPIClient_SwarmUnlock_Call) Return(_a0 error) *MockAPIClient_SwarmUnlock_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAPIClient_SwarmUnlock_Call) RunAndReturn(run func(context.Context, swarm.UnlockRequest) error) *MockAPIClient_SwarmUnlock_Call {
	_c.Call.Return(run)
	return _c
}

// SwarmUpdate provides a mock function with given fields: ctx, version, _a2, flags
func (_m *MockAPIClient) SwarmUpdate(ctx context.Context, version swarm.Version, _a2 swarm.Spec, flags swarm.UpdateFlags) error {
	ret := _m.Called(ctx, version, _a2, flags)

	if len(ret) == 0 {
		panic("no return value specified for SwarmUpdate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, swarm.Version, swarm.Spec, swarm.UpdateFlags) error); ok {
		r0 = rf(ctx, version, _a2, flags)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAPIClient_SwarmUpdate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'SwarmUpdate'
type MockAPIClient_SwarmUpdate_Call struct {
	*mock.Call
}

// SwarmUpdate is a helper method to define mock.On call
//   - ctx context.Context
//   - version swarm.Version
//   - _a2 swarm.Spec
//   - flags swarm.UpdateFlags
func (_e *MockAPIClient_Expecter) SwarmUpdate(ctx interface{}, version interface{}, _a2 interface{}, flags interface{}) *MockAPIClient_SwarmUpdate_Call {
	return &MockAPIClient_SwarmUpdate_Call{Call: _e.mock.On("SwarmUpdate", ctx, version, _a2, flags)}
}

func (_c *MockAPIClient_SwarmUpdate_Call) Run(run func(ctx context.Context, version swarm.Version, _a2 swarm.Spec, flags swarm.UpdateFlags)) *MockAPIClient_SwarmUpdate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(swarm.Version), args[2].(swarm.Spec), args[3].(swarm.UpdateFlags))
	})
	return _c
}

func (_c *MockAPIClient_SwarmUpdate_Call) Return(_a0 error) *MockAPIClient_SwarmUpdate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAPIClient_SwarmUpdate_Call) RunAndReturn(run func(context.Context, swarm.Version, swarm.Spec, swarm.UpdateFlags) error) *MockAPIClient_SwarmUpdate_Call {
	_c.Call.Return(run)
	return _c
}

// TaskInspectWithRaw provides a mock function with given fields: ctx, taskID
func (_m *MockAPIClient) TaskInspectWithRaw(ctx context.Context, taskID string) (swarm.Task, []byte, error) {
	ret := _m.Called(ctx, taskID)

	if len(ret) == 0 {
		panic("no return value specified for TaskInspectWithRaw")
	}

	var r0 swarm.Task
	var r1 []byte
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (swarm.Task, []byte, error)); ok {
		return rf(ctx, taskID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) swarm.Task); ok {
		r0 = rf(ctx, taskID)
	} else {
		r0 = ret.Get(0).(swarm.Task)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) []byte); ok {
		r1 = rf(ctx, taskID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]byte)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(ctx, taskID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockAPIClient_TaskInspectWithRaw_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TaskInspectWithRaw'
type MockAPIClient_TaskInspectWithRaw_Call struct {
	*mock.Call
}

// TaskInspectWithRaw is a helper method to define mock.On call
//   - ctx context.Context
//   - taskID string
func (_e *MockAPIClient_Expecter) TaskInspectWithRaw(ctx interface{}, taskID interface{}) *MockAPIClient_TaskInspectWithRaw_Call {
	return &MockAPIClient_TaskInspectWithRaw_Call{Call: _e.mock.On("TaskInspectWithRaw", ctx, taskID)}
}

func (_c *MockAPIClient_TaskInspectWithRaw_Call) Run(run func(ctx context.Context, taskID string)) *MockAPIClient_TaskInspectWithRaw_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockAPIClient_TaskInspectWithRaw_Call) Return(_a0 swarm.Task, _a1 []byte, _a2 error) *MockAPIClient_TaskInspectWithRaw_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockAPIClient_TaskInspectWithRaw_Call) RunAndReturn(run func(context.Context, string) (swarm.Task, []byte, error)) *MockAPIClient_TaskInspectWithRaw_Call {
	_c.Call.Return(run)
	return _c
}

// TaskList provides a mock function with given fields: ctx, options
func (_m *MockAPIClient) TaskList(ctx context.Context, options types.TaskListOptions) ([]swarm.Task, error) {
	ret := _m.Called(ctx, options)

	if len(ret) == 0 {
		panic("no return value specified for TaskList")
	}

	var r0 []swarm.Task
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, types.TaskListOptions) ([]swarm.Task, error)); ok {
		return rf(ctx, options)
	}
	if rf, ok := ret.Get(0).(func(context.Context, types.TaskListOptions) []swarm.Task); ok {
		r0 = rf(ctx, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]swarm.Task)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, types.TaskListOptions) error); ok {
		r1 = rf(ctx, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAPIClient_TaskList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TaskList'
type MockAPIClient_TaskList_Call struct {
	*mock.Call
}

// TaskList is a helper method to define mock.On call
//   - ctx context.Context
//   - options types.TaskListOptions
func (_e *MockAPIClient_Expecter) TaskList(ctx interface{}, options interface{}) *MockAPIClient_TaskList_Call {
	return &MockAPIClient_TaskList_Call{Call: _e.mock.On("TaskList", ctx, options)}
}

func (_c *MockAPIClient_TaskList_Call) Run(run func(ctx context.Context, options types.TaskListOptions)) *MockAPIClient_TaskList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(types.TaskListOptions))
	})
	return _c
}

func (_c *MockAPIClient_TaskList_Call) Return(_a0 []swarm.Task, _a1 error) *MockAPIClient_TaskList_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAPIClient_TaskList_Call) RunAndReturn(run func(context.Context, types.TaskListOptions) ([]swarm.Task, error)) *MockAPIClient_TaskList_Call {
	_c.Call.Return(run)
	return _c
}

// TaskLogs provides a mock function with given fields: ctx, taskID, options
func (_m *MockAPIClient) TaskLogs(ctx context.Context, taskID string, options container.LogsOptions) (io.ReadCloser, error) {
	ret := _m.Called(ctx, taskID, options)

	if len(ret) == 0 {
		panic("no return value specified for TaskLogs")
	}

	var r0 io.ReadCloser
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string, container.LogsOptions) (io.ReadCloser, error)); ok {
		return rf(ctx, taskID, options)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string, container.LogsOptions) io.ReadCloser); ok {
		r0 = rf(ctx, taskID, options)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(io.ReadCloser)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, string, container.LogsOptions) error); ok {
		r1 = rf(ctx, taskID, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAPIClient_TaskLogs_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'TaskLogs'
type MockAPIClient_TaskLogs_Call struct {
	*mock.Call
}

// TaskLogs is a helper method to define mock.On call
//   - ctx context.Context
//   - taskID string
//   - options container.LogsOptions
func (_e *MockAPIClient_Expecter) TaskLogs(ctx interface{}, taskID interface{}, options interface{}) *MockAPIClient_TaskLogs_Call {
	return &MockAPIClient_TaskLogs_Call{Call: _e.mock.On("TaskLogs", ctx, taskID, options)}
}

func (_c *MockAPIClient_TaskLogs_Call) Run(run func(ctx context.Context, taskID string, options container.LogsOptions)) *MockAPIClient_TaskLogs_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(container.LogsOptions))
	})
	return _c
}

func (_c *MockAPIClient_TaskLogs_Call) Return(_a0 io.ReadCloser, _a1 error) *MockAPIClient_TaskLogs_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAPIClient_TaskLogs_Call) RunAndReturn(run func(context.Context, string, container.LogsOptions) (io.ReadCloser, error)) *MockAPIClient_TaskLogs_Call {
	_c.Call.Return(run)
	return _c
}

// VolumeCreate provides a mock function with given fields: ctx, options
func (_m *MockAPIClient) VolumeCreate(ctx context.Context, options volume.CreateOptions) (volume.Volume, error) {
	ret := _m.Called(ctx, options)

	if len(ret) == 0 {
		panic("no return value specified for VolumeCreate")
	}

	var r0 volume.Volume
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, volume.CreateOptions) (volume.Volume, error)); ok {
		return rf(ctx, options)
	}
	if rf, ok := ret.Get(0).(func(context.Context, volume.CreateOptions) volume.Volume); ok {
		r0 = rf(ctx, options)
	} else {
		r0 = ret.Get(0).(volume.Volume)
	}

	if rf, ok := ret.Get(1).(func(context.Context, volume.CreateOptions) error); ok {
		r1 = rf(ctx, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAPIClient_VolumeCreate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VolumeCreate'
type MockAPIClient_VolumeCreate_Call struct {
	*mock.Call
}

// VolumeCreate is a helper method to define mock.On call
//   - ctx context.Context
//   - options volume.CreateOptions
func (_e *MockAPIClient_Expecter) VolumeCreate(ctx interface{}, options interface{}) *MockAPIClient_VolumeCreate_Call {
	return &MockAPIClient_VolumeCreate_Call{Call: _e.mock.On("VolumeCreate", ctx, options)}
}

func (_c *MockAPIClient_VolumeCreate_Call) Run(run func(ctx context.Context, options volume.CreateOptions)) *MockAPIClient_VolumeCreate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(volume.CreateOptions))
	})
	return _c
}

func (_c *MockAPIClient_VolumeCreate_Call) Return(_a0 volume.Volume, _a1 error) *MockAPIClient_VolumeCreate_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAPIClient_VolumeCreate_Call) RunAndReturn(run func(context.Context, volume.CreateOptions) (volume.Volume, error)) *MockAPIClient_VolumeCreate_Call {
	_c.Call.Return(run)
	return _c
}

// VolumeInspect provides a mock function with given fields: ctx, volumeID
func (_m *MockAPIClient) VolumeInspect(ctx context.Context, volumeID string) (volume.Volume, error) {
	ret := _m.Called(ctx, volumeID)

	if len(ret) == 0 {
		panic("no return value specified for VolumeInspect")
	}

	var r0 volume.Volume
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (volume.Volume, error)); ok {
		return rf(ctx, volumeID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) volume.Volume); ok {
		r0 = rf(ctx, volumeID)
	} else {
		r0 = ret.Get(0).(volume.Volume)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) error); ok {
		r1 = rf(ctx, volumeID)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAPIClient_VolumeInspect_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VolumeInspect'
type MockAPIClient_VolumeInspect_Call struct {
	*mock.Call
}

// VolumeInspect is a helper method to define mock.On call
//   - ctx context.Context
//   - volumeID string
func (_e *MockAPIClient_Expecter) VolumeInspect(ctx interface{}, volumeID interface{}) *MockAPIClient_VolumeInspect_Call {
	return &MockAPIClient_VolumeInspect_Call{Call: _e.mock.On("VolumeInspect", ctx, volumeID)}
}

func (_c *MockAPIClient_VolumeInspect_Call) Run(run func(ctx context.Context, volumeID string)) *MockAPIClient_VolumeInspect_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockAPIClient_VolumeInspect_Call) Return(_a0 volume.Volume, _a1 error) *MockAPIClient_VolumeInspect_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAPIClient_VolumeInspect_Call) RunAndReturn(run func(context.Context, string) (volume.Volume, error)) *MockAPIClient_VolumeInspect_Call {
	_c.Call.Return(run)
	return _c
}

// VolumeInspectWithRaw provides a mock function with given fields: ctx, volumeID
func (_m *MockAPIClient) VolumeInspectWithRaw(ctx context.Context, volumeID string) (volume.Volume, []byte, error) {
	ret := _m.Called(ctx, volumeID)

	if len(ret) == 0 {
		panic("no return value specified for VolumeInspectWithRaw")
	}

	var r0 volume.Volume
	var r1 []byte
	var r2 error
	if rf, ok := ret.Get(0).(func(context.Context, string) (volume.Volume, []byte, error)); ok {
		return rf(ctx, volumeID)
	}
	if rf, ok := ret.Get(0).(func(context.Context, string) volume.Volume); ok {
		r0 = rf(ctx, volumeID)
	} else {
		r0 = ret.Get(0).(volume.Volume)
	}

	if rf, ok := ret.Get(1).(func(context.Context, string) []byte); ok {
		r1 = rf(ctx, volumeID)
	} else {
		if ret.Get(1) != nil {
			r1 = ret.Get(1).([]byte)
		}
	}

	if rf, ok := ret.Get(2).(func(context.Context, string) error); ok {
		r2 = rf(ctx, volumeID)
	} else {
		r2 = ret.Error(2)
	}

	return r0, r1, r2
}

// MockAPIClient_VolumeInspectWithRaw_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VolumeInspectWithRaw'
type MockAPIClient_VolumeInspectWithRaw_Call struct {
	*mock.Call
}

// VolumeInspectWithRaw is a helper method to define mock.On call
//   - ctx context.Context
//   - volumeID string
func (_e *MockAPIClient_Expecter) VolumeInspectWithRaw(ctx interface{}, volumeID interface{}) *MockAPIClient_VolumeInspectWithRaw_Call {
	return &MockAPIClient_VolumeInspectWithRaw_Call{Call: _e.mock.On("VolumeInspectWithRaw", ctx, volumeID)}
}

func (_c *MockAPIClient_VolumeInspectWithRaw_Call) Run(run func(ctx context.Context, volumeID string)) *MockAPIClient_VolumeInspectWithRaw_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string))
	})
	return _c
}

func (_c *MockAPIClient_VolumeInspectWithRaw_Call) Return(_a0 volume.Volume, _a1 []byte, _a2 error) *MockAPIClient_VolumeInspectWithRaw_Call {
	_c.Call.Return(_a0, _a1, _a2)
	return _c
}

func (_c *MockAPIClient_VolumeInspectWithRaw_Call) RunAndReturn(run func(context.Context, string) (volume.Volume, []byte, error)) *MockAPIClient_VolumeInspectWithRaw_Call {
	_c.Call.Return(run)
	return _c
}

// VolumeList provides a mock function with given fields: ctx, options
func (_m *MockAPIClient) VolumeList(ctx context.Context, options volume.ListOptions) (volume.ListResponse, error) {
	ret := _m.Called(ctx, options)

	if len(ret) == 0 {
		panic("no return value specified for VolumeList")
	}

	var r0 volume.ListResponse
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, volume.ListOptions) (volume.ListResponse, error)); ok {
		return rf(ctx, options)
	}
	if rf, ok := ret.Get(0).(func(context.Context, volume.ListOptions) volume.ListResponse); ok {
		r0 = rf(ctx, options)
	} else {
		r0 = ret.Get(0).(volume.ListResponse)
	}

	if rf, ok := ret.Get(1).(func(context.Context, volume.ListOptions) error); ok {
		r1 = rf(ctx, options)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAPIClient_VolumeList_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VolumeList'
type MockAPIClient_VolumeList_Call struct {
	*mock.Call
}

// VolumeList is a helper method to define mock.On call
//   - ctx context.Context
//   - options volume.ListOptions
func (_e *MockAPIClient_Expecter) VolumeList(ctx interface{}, options interface{}) *MockAPIClient_VolumeList_Call {
	return &MockAPIClient_VolumeList_Call{Call: _e.mock.On("VolumeList", ctx, options)}
}

func (_c *MockAPIClient_VolumeList_Call) Run(run func(ctx context.Context, options volume.ListOptions)) *MockAPIClient_VolumeList_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(volume.ListOptions))
	})
	return _c
}

func (_c *MockAPIClient_VolumeList_Call) Return(_a0 volume.ListResponse, _a1 error) *MockAPIClient_VolumeList_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAPIClient_VolumeList_Call) RunAndReturn(run func(context.Context, volume.ListOptions) (volume.ListResponse, error)) *MockAPIClient_VolumeList_Call {
	_c.Call.Return(run)
	return _c
}

// VolumeRemove provides a mock function with given fields: ctx, volumeID, force
func (_m *MockAPIClient) VolumeRemove(ctx context.Context, volumeID string, force bool) error {
	ret := _m.Called(ctx, volumeID, force)

	if len(ret) == 0 {
		panic("no return value specified for VolumeRemove")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, bool) error); ok {
		r0 = rf(ctx, volumeID, force)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAPIClient_VolumeRemove_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VolumeRemove'
type MockAPIClient_VolumeRemove_Call struct {
	*mock.Call
}

// VolumeRemove is a helper method to define mock.On call
//   - ctx context.Context
//   - volumeID string
//   - force bool
func (_e *MockAPIClient_Expecter) VolumeRemove(ctx interface{}, volumeID interface{}, force interface{}) *MockAPIClient_VolumeRemove_Call {
	return &MockAPIClient_VolumeRemove_Call{Call: _e.mock.On("VolumeRemove", ctx, volumeID, force)}
}

func (_c *MockAPIClient_VolumeRemove_Call) Run(run func(ctx context.Context, volumeID string, force bool)) *MockAPIClient_VolumeRemove_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(bool))
	})
	return _c
}

func (_c *MockAPIClient_VolumeRemove_Call) Return(_a0 error) *MockAPIClient_VolumeRemove_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAPIClient_VolumeRemove_Call) RunAndReturn(run func(context.Context, string, bool) error) *MockAPIClient_VolumeRemove_Call {
	_c.Call.Return(run)
	return _c
}

// VolumeUpdate provides a mock function with given fields: ctx, volumeID, version, options
func (_m *MockAPIClient) VolumeUpdate(ctx context.Context, volumeID string, version swarm.Version, options volume.UpdateOptions) error {
	ret := _m.Called(ctx, volumeID, version, options)

	if len(ret) == 0 {
		panic("no return value specified for VolumeUpdate")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func(context.Context, string, swarm.Version, volume.UpdateOptions) error); ok {
		r0 = rf(ctx, volumeID, version, options)
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockAPIClient_VolumeUpdate_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VolumeUpdate'
type MockAPIClient_VolumeUpdate_Call struct {
	*mock.Call
}

// VolumeUpdate is a helper method to define mock.On call
//   - ctx context.Context
//   - volumeID string
//   - version swarm.Version
//   - options volume.UpdateOptions
func (_e *MockAPIClient_Expecter) VolumeUpdate(ctx interface{}, volumeID interface{}, version interface{}, options interface{}) *MockAPIClient_VolumeUpdate_Call {
	return &MockAPIClient_VolumeUpdate_Call{Call: _e.mock.On("VolumeUpdate", ctx, volumeID, version, options)}
}

func (_c *MockAPIClient_VolumeUpdate_Call) Run(run func(ctx context.Context, volumeID string, version swarm.Version, options volume.UpdateOptions)) *MockAPIClient_VolumeUpdate_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(string), args[2].(swarm.Version), args[3].(volume.UpdateOptions))
	})
	return _c
}

func (_c *MockAPIClient_VolumeUpdate_Call) Return(_a0 error) *MockAPIClient_VolumeUpdate_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockAPIClient_VolumeUpdate_Call) RunAndReturn(run func(context.Context, string, swarm.Version, volume.UpdateOptions) error) *MockAPIClient_VolumeUpdate_Call {
	_c.Call.Return(run)
	return _c
}

// VolumesPrune provides a mock function with given fields: ctx, pruneFilter
func (_m *MockAPIClient) VolumesPrune(ctx context.Context, pruneFilter filters.Args) (volume.PruneReport, error) {
	ret := _m.Called(ctx, pruneFilter)

	if len(ret) == 0 {
		panic("no return value specified for VolumesPrune")
	}

	var r0 volume.PruneReport
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, filters.Args) (volume.PruneReport, error)); ok {
		return rf(ctx, pruneFilter)
	}
	if rf, ok := ret.Get(0).(func(context.Context, filters.Args) volume.PruneReport); ok {
		r0 = rf(ctx, pruneFilter)
	} else {
		r0 = ret.Get(0).(volume.PruneReport)
	}

	if rf, ok := ret.Get(1).(func(context.Context, filters.Args) error); ok {
		r1 = rf(ctx, pruneFilter)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockAPIClient_VolumesPrune_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'VolumesPrune'
type MockAPIClient_VolumesPrune_Call struct {
	*mock.Call
}

// VolumesPrune is a helper method to define mock.On call
//   - ctx context.Context
//   - pruneFilter filters.Args
func (_e *MockAPIClient_Expecter) VolumesPrune(ctx interface{}, pruneFilter interface{}) *MockAPIClient_VolumesPrune_Call {
	return &MockAPIClient_VolumesPrune_Call{Call: _e.mock.On("VolumesPrune", ctx, pruneFilter)}
}

func (_c *MockAPIClient_VolumesPrune_Call) Run(run func(ctx context.Context, pruneFilter filters.Args)) *MockAPIClient_VolumesPrune_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(filters.Args))
	})
	return _c
}

func (_c *MockAPIClient_VolumesPrune_Call) Return(_a0 volume.PruneReport, _a1 error) *MockAPIClient_VolumesPrune_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockAPIClient_VolumesPrune_Call) RunAndReturn(run func(context.Context, filters.Args) (volume.PruneReport, error)) *MockAPIClient_VolumesPrune_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockAPIClient creates a new instance of MockAPIClient. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockAPIClient(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockAPIClient {
	mock := &MockAPIClient{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
