// Code generated by mockery v2.52.3. DO NOT EDIT.

package usecases

import (
	context "context"
	server "oppossome/serverpouch/internal/domain/server"

	mock "github.com/stretchr/testify/mock"

	uuid "github.com/google/uuid"
)

// MockUsecases is an autogenerated mock type for the Usecases type
type MockUsecases struct {
	mock.Mock
}

type MockUsecases_Expecter struct {
	mock *mock.Mock
}

func (_m *MockUsecases) EXPECT() *MockUsecases_Expecter {
	return &MockUsecases_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with no fields
func (_m *MockUsecases) Close() {
	_m.Called()
}

// MockUsecases_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockUsecases_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockUsecases_Expecter) Close() *MockUsecases_Close_Call {
	return &MockUsecases_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockUsecases_Close_Call) Run(run func()) *MockUsecases_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockUsecases_Close_Call) Return() *MockUsecases_Close_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockUsecases_Close_Call) RunAndReturn(run func()) *MockUsecases_Close_Call {
	_c.Run(run)
	return _c
}

// CreateServer provides a mock function with given fields: _a0, _a1
func (_m *MockUsecases) CreateServer(_a0 context.Context, _a1 server.ServerInstanceConfig) (server.ServerInstance, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for CreateServer")
	}

	var r0 server.ServerInstance
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, server.ServerInstanceConfig) (server.ServerInstance, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, server.ServerInstanceConfig) server.ServerInstance); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(server.ServerInstance)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, server.ServerInstanceConfig) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUsecases_CreateServer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'CreateServer'
type MockUsecases_CreateServer_Call struct {
	*mock.Call
}

// CreateServer is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 server.ServerInstanceConfig
func (_e *MockUsecases_Expecter) CreateServer(_a0 interface{}, _a1 interface{}) *MockUsecases_CreateServer_Call {
	return &MockUsecases_CreateServer_Call{Call: _e.mock.On("CreateServer", _a0, _a1)}
}

func (_c *MockUsecases_CreateServer_Call) Run(run func(_a0 context.Context, _a1 server.ServerInstanceConfig)) *MockUsecases_CreateServer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(server.ServerInstanceConfig))
	})
	return _c
}

func (_c *MockUsecases_CreateServer_Call) Return(_a0 server.ServerInstance, _a1 error) *MockUsecases_CreateServer_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUsecases_CreateServer_Call) RunAndReturn(run func(context.Context, server.ServerInstanceConfig) (server.ServerInstance, error)) *MockUsecases_CreateServer_Call {
	_c.Call.Return(run)
	return _c
}

// GetServer provides a mock function with given fields: _a0, _a1
func (_m *MockUsecases) GetServer(_a0 context.Context, _a1 uuid.UUID) (server.ServerInstance, error) {
	ret := _m.Called(_a0, _a1)

	if len(ret) == 0 {
		panic("no return value specified for GetServer")
	}

	var r0 server.ServerInstance
	var r1 error
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) (server.ServerInstance, error)); ok {
		return rf(_a0, _a1)
	}
	if rf, ok := ret.Get(0).(func(context.Context, uuid.UUID) server.ServerInstance); ok {
		r0 = rf(_a0, _a1)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(server.ServerInstance)
		}
	}

	if rf, ok := ret.Get(1).(func(context.Context, uuid.UUID) error); ok {
		r1 = rf(_a0, _a1)
	} else {
		r1 = ret.Error(1)
	}

	return r0, r1
}

// MockUsecases_GetServer_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'GetServer'
type MockUsecases_GetServer_Call struct {
	*mock.Call
}

// GetServer is a helper method to define mock.On call
//   - _a0 context.Context
//   - _a1 uuid.UUID
func (_e *MockUsecases_Expecter) GetServer(_a0 interface{}, _a1 interface{}) *MockUsecases_GetServer_Call {
	return &MockUsecases_GetServer_Call{Call: _e.mock.On("GetServer", _a0, _a1)}
}

func (_c *MockUsecases_GetServer_Call) Run(run func(_a0 context.Context, _a1 uuid.UUID)) *MockUsecases_GetServer_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context), args[1].(uuid.UUID))
	})
	return _c
}

func (_c *MockUsecases_GetServer_Call) Return(_a0 server.ServerInstance, _a1 error) *MockUsecases_GetServer_Call {
	_c.Call.Return(_a0, _a1)
	return _c
}

func (_c *MockUsecases_GetServer_Call) RunAndReturn(run func(context.Context, uuid.UUID) (server.ServerInstance, error)) *MockUsecases_GetServer_Call {
	_c.Call.Return(run)
	return _c
}

// ListServers provides a mock function with given fields: _a0
func (_m *MockUsecases) ListServers(_a0 context.Context) []server.ServerInstance {
	ret := _m.Called(_a0)

	if len(ret) == 0 {
		panic("no return value specified for ListServers")
	}

	var r0 []server.ServerInstance
	if rf, ok := ret.Get(0).(func(context.Context) []server.ServerInstance); ok {
		r0 = rf(_a0)
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).([]server.ServerInstance)
		}
	}

	return r0
}

// MockUsecases_ListServers_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'ListServers'
type MockUsecases_ListServers_Call struct {
	*mock.Call
}

// ListServers is a helper method to define mock.On call
//   - _a0 context.Context
func (_e *MockUsecases_Expecter) ListServers(_a0 interface{}) *MockUsecases_ListServers_Call {
	return &MockUsecases_ListServers_Call{Call: _e.mock.On("ListServers", _a0)}
}

func (_c *MockUsecases_ListServers_Call) Run(run func(_a0 context.Context)) *MockUsecases_ListServers_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run(args[0].(context.Context))
	})
	return _c
}

func (_c *MockUsecases_ListServers_Call) Return(_a0 []server.ServerInstance) *MockUsecases_ListServers_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockUsecases_ListServers_Call) RunAndReturn(run func(context.Context) []server.ServerInstance) *MockUsecases_ListServers_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockUsecases creates a new instance of MockUsecases. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockUsecases(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockUsecases {
	mock := &MockUsecases{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
