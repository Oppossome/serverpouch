// Code generated by mockery v2.52.3. DO NOT EDIT.

package server

import (
	server "oppossome/serverpouch/internal/domain/server"

	mock "github.com/stretchr/testify/mock"
)

// MockServerInstance is an autogenerated mock type for the ServerInstance type
type MockServerInstance struct {
	mock.Mock
}

type MockServerInstance_Expecter struct {
	mock *mock.Mock
}

func (_m *MockServerInstance) EXPECT() *MockServerInstance_Expecter {
	return &MockServerInstance_Expecter{mock: &_m.Mock}
}

// Close provides a mock function with no fields
func (_m *MockServerInstance) Close() {
	_m.Called()
}

// MockServerInstance_Close_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Close'
type MockServerInstance_Close_Call struct {
	*mock.Call
}

// Close is a helper method to define mock.On call
func (_e *MockServerInstance_Expecter) Close() *MockServerInstance_Close_Call {
	return &MockServerInstance_Close_Call{Call: _e.mock.On("Close")}
}

func (_c *MockServerInstance_Close_Call) Run(run func()) *MockServerInstance_Close_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockServerInstance_Close_Call) Return() *MockServerInstance_Close_Call {
	_c.Call.Return()
	return _c
}

func (_c *MockServerInstance_Close_Call) RunAndReturn(run func()) *MockServerInstance_Close_Call {
	_c.Run(run)
	return _c
}

// Config provides a mock function with no fields
func (_m *MockServerInstance) Config() server.ServerInstanceConfig {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Config")
	}

	var r0 server.ServerInstanceConfig
	if rf, ok := ret.Get(0).(func() server.ServerInstanceConfig); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(server.ServerInstanceConfig)
		}
	}

	return r0
}

// MockServerInstance_Config_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Config'
type MockServerInstance_Config_Call struct {
	*mock.Call
}

// Config is a helper method to define mock.On call
func (_e *MockServerInstance_Expecter) Config() *MockServerInstance_Config_Call {
	return &MockServerInstance_Config_Call{Call: _e.mock.On("Config")}
}

func (_c *MockServerInstance_Config_Call) Run(run func()) *MockServerInstance_Config_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockServerInstance_Config_Call) Return(_a0 server.ServerInstanceConfig) *MockServerInstance_Config_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockServerInstance_Config_Call) RunAndReturn(run func() server.ServerInstanceConfig) *MockServerInstance_Config_Call {
	_c.Call.Return(run)
	return _c
}

// Events provides a mock function with no fields
func (_m *MockServerInstance) Events() *server.ServerInstanceEvents {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Events")
	}

	var r0 *server.ServerInstanceEvents
	if rf, ok := ret.Get(0).(func() *server.ServerInstanceEvents); ok {
		r0 = rf()
	} else {
		if ret.Get(0) != nil {
			r0 = ret.Get(0).(*server.ServerInstanceEvents)
		}
	}

	return r0
}

// MockServerInstance_Events_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Events'
type MockServerInstance_Events_Call struct {
	*mock.Call
}

// Events is a helper method to define mock.On call
func (_e *MockServerInstance_Expecter) Events() *MockServerInstance_Events_Call {
	return &MockServerInstance_Events_Call{Call: _e.mock.On("Events")}
}

func (_c *MockServerInstance_Events_Call) Run(run func()) *MockServerInstance_Events_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockServerInstance_Events_Call) Return(_a0 *server.ServerInstanceEvents) *MockServerInstance_Events_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockServerInstance_Events_Call) RunAndReturn(run func() *server.ServerInstanceEvents) *MockServerInstance_Events_Call {
	_c.Call.Return(run)
	return _c
}

// Kill provides a mock function with no fields
func (_m *MockServerInstance) Kill() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Kill")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockServerInstance_Kill_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Kill'
type MockServerInstance_Kill_Call struct {
	*mock.Call
}

// Kill is a helper method to define mock.On call
func (_e *MockServerInstance_Expecter) Kill() *MockServerInstance_Kill_Call {
	return &MockServerInstance_Kill_Call{Call: _e.mock.On("Kill")}
}

func (_c *MockServerInstance_Kill_Call) Run(run func()) *MockServerInstance_Kill_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockServerInstance_Kill_Call) Return(_a0 error) *MockServerInstance_Kill_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockServerInstance_Kill_Call) RunAndReturn(run func() error) *MockServerInstance_Kill_Call {
	_c.Call.Return(run)
	return _c
}

// Start provides a mock function with no fields
func (_m *MockServerInstance) Start() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Start")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockServerInstance_Start_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Start'
type MockServerInstance_Start_Call struct {
	*mock.Call
}

// Start is a helper method to define mock.On call
func (_e *MockServerInstance_Expecter) Start() *MockServerInstance_Start_Call {
	return &MockServerInstance_Start_Call{Call: _e.mock.On("Start")}
}

func (_c *MockServerInstance_Start_Call) Run(run func()) *MockServerInstance_Start_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockServerInstance_Start_Call) Return(_a0 error) *MockServerInstance_Start_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockServerInstance_Start_Call) RunAndReturn(run func() error) *MockServerInstance_Start_Call {
	_c.Call.Return(run)
	return _c
}

// Status provides a mock function with no fields
func (_m *MockServerInstance) Status() server.ServerInstanceStatus {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Status")
	}

	var r0 server.ServerInstanceStatus
	if rf, ok := ret.Get(0).(func() server.ServerInstanceStatus); ok {
		r0 = rf()
	} else {
		r0 = ret.Get(0).(server.ServerInstanceStatus)
	}

	return r0
}

// MockServerInstance_Status_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Status'
type MockServerInstance_Status_Call struct {
	*mock.Call
}

// Status is a helper method to define mock.On call
func (_e *MockServerInstance_Expecter) Status() *MockServerInstance_Status_Call {
	return &MockServerInstance_Status_Call{Call: _e.mock.On("Status")}
}

func (_c *MockServerInstance_Status_Call) Run(run func()) *MockServerInstance_Status_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockServerInstance_Status_Call) Return(_a0 server.ServerInstanceStatus) *MockServerInstance_Status_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockServerInstance_Status_Call) RunAndReturn(run func() server.ServerInstanceStatus) *MockServerInstance_Status_Call {
	_c.Call.Return(run)
	return _c
}

// Stop provides a mock function with no fields
func (_m *MockServerInstance) Stop() error {
	ret := _m.Called()

	if len(ret) == 0 {
		panic("no return value specified for Stop")
	}

	var r0 error
	if rf, ok := ret.Get(0).(func() error); ok {
		r0 = rf()
	} else {
		r0 = ret.Error(0)
	}

	return r0
}

// MockServerInstance_Stop_Call is a *mock.Call that shadows Run/Return methods with type explicit version for method 'Stop'
type MockServerInstance_Stop_Call struct {
	*mock.Call
}

// Stop is a helper method to define mock.On call
func (_e *MockServerInstance_Expecter) Stop() *MockServerInstance_Stop_Call {
	return &MockServerInstance_Stop_Call{Call: _e.mock.On("Stop")}
}

func (_c *MockServerInstance_Stop_Call) Run(run func()) *MockServerInstance_Stop_Call {
	_c.Call.Run(func(args mock.Arguments) {
		run()
	})
	return _c
}

func (_c *MockServerInstance_Stop_Call) Return(_a0 error) *MockServerInstance_Stop_Call {
	_c.Call.Return(_a0)
	return _c
}

func (_c *MockServerInstance_Stop_Call) RunAndReturn(run func() error) *MockServerInstance_Stop_Call {
	_c.Call.Return(run)
	return _c
}

// NewMockServerInstance creates a new instance of MockServerInstance. It also registers a testing interface on the mock and a cleanup function to assert the mocks expectations.
// The first argument is typically a *testing.T value.
func NewMockServerInstance(t interface {
	mock.TestingT
	Cleanup(func())
}) *MockServerInstance {
	mock := &MockServerInstance{}
	mock.Mock.Test(t)

	t.Cleanup(func() { mock.AssertExpectations(t) })

	return mock
}
